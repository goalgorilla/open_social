{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 *
 * @see template_preprocess_field()
 */
#}
{# Fields in the event teaser need to render without a div, because it is a child element of a tag that cannot have a div such as an anchor or paragraph #}

{%
  set wrapper_classes =
    label_display == "inline"
      ? ["list-item", "list-item--withlabel"]
      : []
%}

{% if not bare %}
<div{{ attributes.addClass(wrapper_classes) }}>
{% endif %}

  {% if not label_hidden %}
  <div{{ title_attributes.addClass("list-item__label") }}>{{ label }}</div>
  {% endif %}

  {% if multiple %}
  <div>
  {% endif %}

    {% for item in items %}
      <div{{ item.attributes.addClass('flist-item__text') }}>{{ item.content }}</div>
    {% endfor %}

  {% if multiple %}
  </div>
  {% endif %}


{% if not bare %}
</div>
{% endif %}
