{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}

<div class="card brand-border-radius">
  <div class="card__body">
    {% if (content.field_profile_phone_number|render or user_mail or content.field_profile_address|render) %}
      <h4>{% trans %}Contact information{% endtrans %}</h4>
    {% endif %}

    {% if content.field_profile_phone_number|render %}
      <div class="list-item">
          <div class="list-item__label">{% trans %}Phone{% endtrans %}</div>
          <div class="list-item__text">{{ content.field_profile_phone_number }}</div>
      </div>
    {% endif %}

    {% if user_mail %}
      <div class="list-item">
          <div class="list-item__label">{% trans %}E-mail{% endtrans %}</div>
          <div class="list-item__text">{{ user_mail }}</a></div>
      </div>
    {% endif %}

    {% if content.field_profile_address|render %}
      <div class="list-item">
          <div class="list-item__label">{% trans %}Address{% endtrans %}</div>
          <div class="list-item__text">
              {{ content.field_profile_address }}
          </div>
      </div>
    {% endif %}


    {% if content.field_profile_self_introduction|render %}
      <h5>{% trans %}Intro{% endtrans %}</h5>
      {{ content.field_profile_self_introduction }}
    {% endif %}

    {% if content.field_profile_interests['#items'] %}
      <h5>{% trans %}Your interests{% endtrans %}</h5>
      {% for item in content.field_profile_interests['#items'] %}
        <div class="badge badge--pill badge--large badge-default">{{ item.entity.label }}</div>
      {% endfor %}
    {% endif %}

    {% if content.field_profile_expertise['#items'] %}
      <h5>{% trans %}Your expertise{% endtrans %}</h5>
      {% for item in content.field_profile_expertise['#items'] %}
        <div class="badge badge--pill badge--large badge-default">{{ item.entity.label }}</div>
      {% endfor %}
    {% endif %}

    {% if content.field_profile_profile_tag['#items'] %}
      <h5>{% trans %}Profile tags{% endtrans %}</h5>
      {% for item in content.field_profile_profile_tag['#items'] %}
        <div class="badge badge--pill badge--large badge-default">{{ item.entity.label }}</div>
      {% endfor %}
    {% endif %}

    {% if (content|render is empty and user_mail is empty)%}
        {% trans %}{{ profile_name }} has not shared profile information.{% endtrans %}
    {% endif %}

  </div>
</div>
