{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}

{{ attach_library('socialbase/hero') }}
{{ attach_library('socialbase/page-node') }}

{% set classes = [
  'hero__banner',
  'hero__banner--static',
  no_image ? 'no-image'
] %}

<div{{ attributes.addClass(classes) }}>
  <div class="container">
    <div class="cover-wrap">

      {% if node_edit_url %}
        <div class="hero-action-button">
          <a href="{{ node_edit_url }}" title="{% trans %}Edit content{% endtrans %}"
             class="btn btn-raised btn-default btn-floating">
            <svg class="icon-gray icon-medium">
              <title>{% trans %}Edit content{% endtrans %}</title>
              <use xlink:href="#icon-edit"></use>
            </svg>
          </a>
        </div>
      {% endif %}

      {% if content.links.moderation %}
        <div class="metainfo card_metainfo">
          {{ content.links.moderation }}
        </div>
      {% endif %}

      {% block card_prefix %}
      {% endblock %}

      {% block card_title %}
        {{ title_prefix }}
        <h2{{ title_attributes }} class="teaser__title">
          <a href="{{ url }}" rel="bookmark">{{ label }}</a>
        </h2>
        {{ title_suffix }}
      {% endblock %}

      {% if display_submitted %}
        {% block metainfo %}
          <header class="metainfo">

            <div class="metainfo__avatar">
              {{ author_picture }}
            </div>

            <div class="metainfo__content">
              {{ author }}
              <span class="metainfo__published-date">&bullet; {{ created_date_formatted }} </span>

              {% if visibility_icon and visibility_label %}
                &bullet;
                <div class="badge badge--large"
                     title="{% trans %}The visibility of this content is set to {{ visibility_label }}{% endtrans %} ">
                    <span class="badge__container">
                      <svg class="badge__icon">
                        <use xlink:href="#icon-{{ visibility_icon }}"></use>
                      </svg>
                      <span class="badge__label">&nbsp;</span>
                      <span class="badge__label badge__label--description">{{ visibility_label|capitalize }}</span>
                    </span>
                </div>
              {% endif %}

              <div>
                {% if group_link %}
                  {% trans %} in group {{ group_link }}{% endtrans %}
                {% endif %}
              </div>
            </div>

          </header>
        {% endblock %}
      {% endif %}

      {% block card_suffix %}
        {% if node_image %}
          <div class="hero-image">
            {{ node_image }}
          </div>
        {% endif %}
      {% endblock %}

      <div class="hero-footer">

        {% block nodefull_specialfields %}
        {% endblock %}

        <div class="hero-footer__list">

          {% block metaengage %}
            <div class="meta-engage">
              <div class="hero-footer__list-left">
                {% if comment_field_status is not empty %}
                  <a href="#section-comments" class="badge badge--large"
                     title="{% trans %}Total amount of comments{% endtrans %}">
                    <span class="badge__container">
                      <svg class="badge__icon">
                        <use xlink:href="#icon-comment"></use>
                      </svg>
                      <span class="badge__label">
                        {{ comment_count }}
                      </span>
                      <span class="badge__label badge__label--description">
                        {% trans %}
                          comment
                        {% plural comment_count %}
                          comments
                        {% endtrans %}
                      </span>
                    </span>
                  </a>
                {% endif %}

                {{ content.like_and_dislike }}

                {% if views_count is not empty and views_label %}
                  <div class="badge badge--large"
                       title="{% trans %}Total amount of views{% endtrans %}">
                  <span class="badge__container">
                    <svg class="badge__icon">
                      <use xlink:href="#icon-views"></use>
                    </svg>
                    <span class="badge__label">
                      {{ views_count }}
                    </span>
                    <span class="badge__label badge__label--description">{{ views_label }}</span>
                  </span>
                  </div>
                {% endif %}
              </div>

              {% if content.field_event_addtocal|render is not empty or content.flag_follow_content|render is not empty %}
                <div class="hero_btn-group">
                  {% if content.field_event_addtocal|render is not empty and logged_in %}
                    <div class="meta-addtocal">
                      {{ content.field_event_addtocal }}
                    </div>
                  {% endif %}

                  {% if content.flag_follow_content|render is not empty %}
                    <div class="meta-follow">
                      {{ content.flag_follow_content }}
                    </div>
                  {% endif %}
                </div>
              {% endif %}

            </div>
          {% endblock %}

        </div>
        {% if content.shariff_field and visibility_icon == 'public' %}
          <div class="hero-footer__share">
            <span>{% trans %} Share this page {% endtrans %}</span>
            {{ content.shariff_field }}
          </div>
        {% endif %}

      </div>
    </div>

  </div>

</div>
