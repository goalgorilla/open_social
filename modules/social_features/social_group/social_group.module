<?php

/**
 * @file
 * The Social group module.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\Group;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\GroupContentInterface;
use Drupal\group\Entity\GroupContentType;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\GroupType;
use Drupal\social_group\Form\SocialGroupAddForm;
use Drupal\social_group\SocialGroupHelperService;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\row\EntityRow;
use Drupal\Core\Url;
use Drupal\Core\Cache\Cache;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\user\Entity\User;
use Drupal\profile\Entity\Profile;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_edit_submit_redirect';
  // Hide default title from Address field.
  if (isset($form['field_group_address'])) {
    $form['field_group_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_edit_submit_redirect';
  // Hide default title from Address field.
  if (isset($form['field_group_address'])) {
    $form['field_group_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_closed_group_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_edit_submit_redirect';
  // Hide default title from Address field.
  if (isset($form['field_group_address'])) {
    $form['field_group_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_closed_group_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_edit_submit_redirect';
  // Hide default title from Address field.
  if (isset($form['field_group_address'])) {
    $form['field_group_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_public_group_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = '_social_group_edit_submit_redirect';

  if (isset($form['field_group_address'])) {
    $form['field_group_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_public_group_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $group = $form_state->getFormObject()->getEntity();
  $entity_type_manager = \Drupal::entityTypeManager();
  $form['group_type'] = (new SocialGroupAddForm($entity_type_manager))->getGroupTypeElement();
  $form['group_type']['#default_value'] = $group->bundle();
  $form['group_type']['#disabled'] = TRUE;
  $form['#group_children']['group_type'] = 'group_content';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_delete_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_edit_submit_redirect';
  // Hide default title from Address field.
  if (isset($form['field_group_address'])) {
    $form['field_group_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_closed_group_delete_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom submit handler to delete all content of the group.
  $group = _social_group_get_current_group();
  $form['description']['#markup'] = t('Are you sure you want to delete your group "@group" along with all of the posts, events and topics inside this group?', ['@group' => $group->label()]);
  $form['actions']['cancel'] = [
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#submit' => ['_social_group_cancel_join_leave_form'],
    '#limit_validation_errors' => [],
  ];
  array_unshift($form['actions']['submit']['#submit'], '_social_group_delete_closed_group');
}

/**
 * Form submit redirect for open and closed groups.
 *
 * @param array $form
 *   Group add or group edit form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function _social_group_edit_submit_redirect(array $form, FormStateInterface $form_state) {
  // Set redirect to the group overview page when user saves a group.
  $form_state->setRedirect(
    'view.groups.page_user_groups',
    ['user' => \Drupal::currentUser()->id(), []]
  );
}

/**
 * Load group content label and group label.
 *
 * @return array
 *   array of group labels.
 */
function _social_group_get_group_labels() {

  // Load the entity label from the group content being handled.
  $group_content = \Drupal::routeMatch()->getParameter('group_content')->label();

  // Load group name.
  $group = \Drupal::routeMatch()->getParameter('group')->label();

  return [
    $group_content,
    $group,
  ];

}

/**
 * Prepares variables for profile templates.
 *
 * Default template: profile.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - profile: The profile object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function social_group_preprocess_group(array &$variables) {
  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $variables['group'];
  $variables['joined'] = FALSE;
  $variables['closed_group'] = FALSE;
  $variables['cta'] = '';
  $variables['closed_group_lock'] = FALSE;

  $account = \Drupal::currentUser();

  $group_type_id = $group->getGroupType()->id();

  if ($group_type_id == 'closed_group') {
    $variables['closed_group_lock'] = TRUE;
  }

  // Set joined to true for teaser when current logged in
  // user is member of the group.
  if ($group->getMember($account)) {
    $variables['joined'] = TRUE;
    if ($group->hasPermission('leave group', $account)) {
      // @todo switch this to get URL from routes correctly.
      $variables['group_operations_url'] = Url::fromUserInput('/group/' . $group->id() . '/leave');
    }
  }
  elseif ($group->hasPermission('join group', $account)) {
    // @todo switch this to get URL from routes correctly.
    $variables['group_operations_url'] = Url::fromUserInput('/group/' . $group->id() . '/join');
    // If the group type is a closed_group.
    if ($group_type_id == 'closed_group' && !$group->hasPermission('manage all groups', $account)) {
      // Users can only be invited.
      $variables['closed_group'] = TRUE;
      $variables['cta'] = t('Invitation only');
    }
  }

  // Add the hero styled image.
  if (!empty($group->field_group_image->entity)) {
    $variables['group_hero_styled_image_url'] = ImageStyle::load('social_xx_large')
      ->buildUrl($group->field_group_image->entity->getFileUri());
  }

  // Add group edit url for management.
  if ($group instanceof Group) {
    // Get the current route name to check if
    // the user is on the edit or delete page.
    $route = \Drupal::routeMatch()->getRouteName();
    if (!in_array($route, ['entity.group.edit_form', 'entity.group.delete_form'])) {
      if ($group->access('update', $account)) {
        $variables['group_edit_url'] = $group->toUrl('edit-form')->toString();
        $variables['#cache']['contexts'][] = 'route.name';
      }
    }
  }
  // Count number of group members.
  $members = $group->getMembers();
  $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

  $members_count = 0;
  if ($members && $profile_storage) {
    foreach ($members as $member) {
      $member_account = $member->getUser();
      if ($member_account instanceof User) {
        $member_profile = $profile_storage->loadByUser($member_account, 'profile');
        if ($member_profile instanceof Profile) {
          $members_count++;
        }
      }
    }
  }
  $variables['group_members'] = $members_count;

}

/**
 * Implements hook_preprocess_HOOK().
 */
function social_group_preprocess_group__hero(array &$variables) {
  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $variables['group'];
  $account = \Drupal::currentUser();

  if ($group->bundle() == 'public_group' && $account->isAnonymous()) {
    $variables['group_operations_url'] = Url::fromRoute('user.register', [], [
      'query' => [
        'destination' => Url::fromRoute('entity.group.join', [
          'group' => $group->id(),
        ])->toString(),
      ],
    ])->toString();
  }
}

/**
 * Implements hook_entity_insert().
 *
 * On a new group insert, from the type
 * open_group or closed_group the Owner gets the group manager role by default.
 */
function social_group_group_insert(GroupInterface $group) {
  // @Todo remove this when https://www.drupal.org/node/2702743 lands and make
  // sure the settings will be implemented accordingly.
  if ($group->getGroupType()->id() == 'open_group' || $group->getGroupType()->id() == 'closed_group') {
    // Get the group owner.
    $account = $group->getOwner();
    // Get membership.
    $content = $group->getMember($account)->getGroupContent();
    // Delete the initial created membership.
    $content->delete();
    $grant_group_admin = FALSE;
    // If the user has this permission inside a group.
    if ($group->hasPermission('manage all groups', $account)) {
      // Then we grant this user de Group Admin role.
      $grant_group_admin = TRUE;
    }
    // When a CM+ creates a group, he is given the group_manager role
    // alongside the group_admin role to keep the full control over the group.
    if ($grant_group_admin) {
      // Delete the initial created membership.
      $content->delete();
      $plugin = $group->getGroupType()->getContentPlugin('group_membership');
      $values = ['group_roles' => [$group->bundle() . '-group_admin', $group->bundle() . '-group_manager']];
      $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $group->getOwnerId(),
      ] + $values);
      $group_content->save();
    }
    else {
      // Create a new membership.
      $plugin = $group->getGroupType()->getContentPlugin('group_membership');
      $values = ['group_roles' => [$group->bundle() . '-group_manager']];
      $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $group->getOwnerId(),
      ] + $values);
      $group_content->save();
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function social_group_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // For group entities.
  if ($entity instanceof Group) {
    // Add cache contexts for some view modes.
    switch ($build['#view_mode']) {
      case 'hero':
        // Add cache contexts for group type & permissions.
        // We need join / leave for the CTA and also update permissions
        // for the button to edit a group.
        $build['#cache']['contexts'][] = 'group.type';
        $build['#cache']['contexts'][] = 'group_membership.roles.permissions';
        $build['#cache']['contexts'][] = 'group_membership.audience';
        $build['#cache']['tags'][] = 'group_block:' . $entity->id();
        break;

      case 'teaser':
        $build['#cache']['contexts'][] = 'user';
        break;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function social_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $action_forms = [
    'group_content_open_group-group_membership_group-join_form',
    'group_content_open_group-group_membership_group-leave_form',
    'group_content_open_group-group_membership_add_form',
    'group_content_open_group-group_membership_delete_form',
    'group_content_closed_group-group_membership_group-join_form',
    'group_content_closed_group-group_membership_group-leave_form',
    'group_content_closed_group-group_membership_add_form',
    'group_content_closed_group-group_membership_delete_form',
  ];

  // Perform alterations on joining / leaving groups.
  if (in_array($form_id, ['group_content_open_group-group_membership_delete_form', 'group_content_closed_group-group_membership_delete_form'])) {
    $form['actions']['submit']['#submit'][] = '_social_membership_delete_form_submit';

    list($name, $group) = _social_group_get_group_labels();

    // Give a better title, description and submit button value.
    $form['#title'] = t('Remove %name from %group', [
      '%name' => $name,
      '%group' => $group,
    ]);
    $form['actions']['submit']['#value'] = t('Remove');
    $form['description']['#markup'] = t('Are you sure you want to remove %name from %group?', [
      '%name' => $name,
      '%group' => $group,
    ]);
  }

  // Set some helpful text on the group join form now it's there.
  if (in_array($form_id, ['group_content_closed_group-group_membership_group-join_form', 'group_content_open_group-group_membership_group-join_form'])) {
    $form['help'] = [
      '#type' => 'item',
      '#markup' => t('By submitting this form you will become a member of the group. Please fill out any available fields to complete your membership information.'),
    ];
    $form['path']['#type'] = 'hidden';
  }

  // Perform alterations on joining / leaving groups.
  if (in_array($form_id, $action_forms)) {

    // Add cancel option on join and leave form.
    $form['actions']['cancel'] = [
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#submit' => ['_social_group_cancel_join_leave_form'],
      '#limit_validation_errors' => [],
    ];

    $form['actions']['submit']['#submit'][] = '_social_group_action_form_submit';
  }

  $membership_forms = [
    'group_content_open_group-group_membership_edit_form',
    'group_content_open_group-group_membership_add_form',
    'group_content_closed_group-group_membership_add_form',
    'group_content_closed_group-group_membership_edit_form',
  ];
  if (in_array($form_id, $membership_forms) && Drupal::currentUser()->id() != 1) {
    // Change titles on membership forms.
    $form['entity_id']['widget'][0]['target_id']['#title'] = t('Select a member');
    $form['group_roles']['widget']['#title'] = t('Group roles');
    // Remove the 'group_admin' role in a generic way
    // for all (future) group types.
    foreach ($form['group_roles']['widget']['#options'] as $key => $value) {
      // Hide the submission for the Group Admin role.
      if (strpos($key, 'group_admin') != FALSE) {
        unset($form['group_roles']['widget']['#options'][$key]);
      }
    }

    $form['path']['#type'] = 'hidden';

    if ('group_content_open_group-group_membership_edit_form' == $form_id) {
      // Remove the user selection autocomplete on editing group membership.
      $form['entity_id']['#access'] = FALSE;

      // Add redirect to Group Membership page.
      $form['actions']['submit']['#submit'][] = '_social_group_membership_edit_form_submit';
    }
  }

  // Check if form is group content create form.
  if (isset($form['#entity_type']) && $form['#entity_type'] === 'node') {
    $group = _social_group_get_current_group();

    if (!empty($group)) {
      // Add custom submit handler just for redirect purposes.
      // We don't want to override the form::save in group.
      $form['actions']['submit']['#submit'][] = '_social_group_node_form_submit';
    }
  }

  $group_forms = [
    'edit' => [
      'group_open_group_edit_form',
      'group_closed_group_edit_form',
    ],
    'add' => [
      'group_open_group_add_form',
      'group_closed_group_add_form',
    ],
  ];
  if (in_array($form_id, $group_forms['add']) || in_array($form_id, $group_forms['edit'])) {
    $form['path']['#type'] = 'hidden';
    $form['actions']['submit']['#value'] = t('Save');

    if (in_array($form_id, $group_forms['edit'])) {
      $etm = \Drupal::service('entity_type.manager');
      $social_group_form = new SocialGroupAddForm($etm);
      $group_type_element = $social_group_form->getGroupTypeElement();
      // Get the current group.
      $group = _social_group_get_current_group();
      // Set the default value in the form.
      $group_type_element['#default_value'] = $group->getGroupType()->id();
      $group_type_element['#disabled'] = TRUE;
      $form['group_type'] = $group_type_element;
      $form['#group_children']['group_type'] = 'group_content';
    }
  }

  switch ($form_id) {
    case 'group_content_public_group-group_membership_group-join_form':
    case 'group_content_public_group-group_membership_group-leave_form':
    case 'group_content_public_group-group_membership_add_form':
    case 'group_content_public_group-group_membership_edit_form':
      $form['actions']['cancel'] = [
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#submit' => ['_social_group_cancel_join_leave_form'],
        '#limit_validation_errors' => [],
      ];

      $form['actions']['submit']['#submit'][] = '_social_group_action_form_submit';

      if (isset($form['path'])) {
        $form['path']['#access'] = FALSE;
      }

      if (\Drupal::currentUser()->id() !== 1 && isset($form['group_roles']['widget']['#options']['public_group-group_admin'])) {
        unset($form['group_roles']['widget']['#options']['public_group-group_admin']);
      }
      break;

    case 'group_public_group_edit_form':
    case 'group_public_group_add_form':
      $form['path']['#type'] = 'hidden';
      $form['actions']['submit']['#value'] = t('Save');
      break;
  }

}

/**
 * Form submit for removing members from a group so we can clear caches.
 */
function _social_membership_delete_form_submit($form, FormStateInterface $form_state) {
  $group = _social_group_get_current_group();

  if (is_object($group)) {
    // Invalidate cache tags.
    $cache_tags = _social_group_cache_tags($group);
    foreach ($cache_tags as $cache_tag) {
      Cache::invalidateTags([$cache_tag]);
    }
  }
}

/**
 * Form submit for group join / leave form.
 */
function _social_group_action_form_submit($form, FormStateInterface $form_state) {
  $group = _social_group_get_current_group();

  if (is_object($group)) {
    // Invalidate cache tags.
    $cache_tags = _social_group_cache_tags($group);
    foreach ($cache_tags as $cache_tag) {
      Cache::invalidateTags([$cache_tag]);
    }

    // Get form that was submitted.
    $complete_form = $form_state->getCompleteForm();

    if (in_array($complete_form['#form_id'], ['group_content_' . $group->bundle() . '_membership_group-join_form', 'group_content_' . $group->bundle() . '-group_membership_add_form'])) {
      // Set redirect to group home page.
      $form_state->setRedirect(
        'entity.group.canonical',
        ['group' => $group->id(), []]
      );
    }
    else {
      // Set redirect to the Group overview page
      // when a user saves their profile.
      $form_state->setRedirect(
        'view.groups.page_user_groups',
        ['user' => \Drupal::currentUser()->id(), []]
      );
    }
  }
}

/**
 * This function checks if the user should get the admin role within a group.
 *
 * Also check if the user has already a membership.
 * If so, update it with the new role.
 */
function _social_group_grant_admin_role($uid, $gid) {
  $account = User::load($uid);
  $group = Group::load($gid);

  // Must be a valid account AND a valid group.
  if ($account instanceof User && $group instanceof Group) {
    // Must have manage all groups permission.
    // Otherwise normal flow will be fine.
    if (!$account->hasPermission('manage all groups')) {
      return;
    }
    // Check if the user is already a member in the group
    // (could be in update mode here).
    /** @var \Drupal\group\GroupMembership $membership */
    $admin_role = $group->bundle() . '-group_admin';
    $membership = $group->getMember($account);

    // Check what roles are there.
    $roles = [];
    foreach ($membership->getGroupContent()->group_roles as $group_role_ref) {
      $roles[] = $group_role_ref->target_id;
    }

    // No admin? Add it.
    if (!in_array($admin_role, $roles)) {
      $membership->getGroupContent()->group_roles[] = ['target_id' => $admin_role];
      $membership->getGroupContent()->save();
    }
  }
}

/**
 * When creating a new group membership.
 *
 * @param \Drupal\group\Entity\GroupContentInterface $group_content
 *   The group content.
 */
function social_group_group_content_insert(GroupContentInterface $group_content) {
  if ($group_content->getEntity()->getEntityTypeId() == 'user') {
    if ($group_content->bundle() == $group_content->getGroup()->bundle() . '-group_membership') {
      _social_group_grant_admin_role($group_content->getEntity()->id(), $group_content->getGroup()->id());
    }
  }
}

/**
 * When updating a group membership.
 *
 * @param \Drupal\group\Entity\GroupContentInterface $group_content
 *   The group content.
 */
function social_group_group_content_update(GroupContentInterface $group_content) {
  if ($group_content->getEntity()->getEntityTypeId() == 'user') {
    if ($group_content->bundle() == $group_content->getGroup()->bundle() . '-group_membership') {
      _social_group_grant_admin_role($group_content->getEntity()->id(), $group_content->getGroup()->id());
    }
  }
}

/**
 * Form submit for membership edit form.
 *
 * @param array $form
 *   Membership edit form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function _social_group_membership_edit_form_submit(array $form, FormStateInterface $form_state) {
  $group = _social_group_get_current_group();

  if (is_object($group)) {
    // Set redirect to the Group overview page when a user saves their profile.
    $form_state->setRedirect(
      'entity.group_content.collection',
      ['group' => $group->id(), []]
    );
  }
}

/**
 * Form cancel for join and leave form.
 *
 * @param array $form
 *   Join and leave form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function _social_group_cancel_join_leave_form(array $form, FormStateInterface $form_state) {
  // Get form that was submitted.
  $group = _social_group_get_current_group();

  if (is_object($group)) {
    // Set redirect only for cancel buttons. Just go back to the group page.
    $form_state->setRedirect(
      'entity.group.canonical',
      ['group' => $group->id(), []]
    );
  }
}

/**
 * Form submit for group content create form.
 *
 * @param array $form
 *   Group node form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function _social_group_node_form_submit(array $form, FormStateInterface $form_state) {
  $nid = $form_state->getValue('nid');
  // Set redirect.
  $form_state->setRedirect(
    'entity.node.canonical',
    ['node' => $nid]
  );
}

/**
 * Alter the visibility field within groups.
 *
 * Implements hook_field_widget_form_alter().
 */
function social_group_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {

  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();

  // Unset the public options on visibility field.
  if ($field_definition->getType() == 'entity_access_field') {
    $default_value = $context['items']->getValue();
    if (isset($default_value[0]['value'])) {
      $element['#default_value'] = $default_value[0]['value'];
    }
    else {
      $element['#default_value'] = 'community';
    }
    $entity = $form_state->getFormObject()->getEntity();

    $current_group = _social_group_get_current_group();
    if (!empty($current_group)) {
      $group_type = $current_group->getGroupType();
      $group_type_id = $group_type->id();
      if (!$entity->id()) {
        switch ($group_type_id) {
          case 'closed_group':
            $element['#default_value'] = 'group';
            break;

          case 'open_group':
            $element['#default_value'] = 'community';
            break;

          case 'public_group':
            $element['#default_value'] = 'public';
            break;
        }
      }
    }
    else {
      $group_type_id = NULL;
      // This is not a group so lets disable this visibility option.
      $element['group']['#disabled'] = TRUE;
    }

    $visibility_options = social_group_get_allowed_visibility_options_per_group_type($group_type_id, NULL, $entity);

    foreach ($visibility_options as $visibility => $allowed) {
      $element[$visibility]['#disabled'] = !$allowed;
    }
  }

}

/**
 * Implements hook_views_post_render().
 *
 * Alter "Group Members" views. Replace user IDs with profile teasers.
 */
function social_group_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() == 'group_members') {
    if (!empty($output['#rows'][0]['#rows'])) {
      foreach ($output['#rows'][0]['#rows'] as $key => $row) {
        // Get Group membership content entity.
        $group_content = $row['#group_content'];
        // Get Profile.
        $user_profile = _social_group_get_member_profile($group_content);
        if ($user_profile) {
          // Use teaser for page and small_teaser for block.
          $view_mode = ($view->current_display === 'block_newest_members') ? 'small_teaser' : 'teaser';
          // Replace output with profile teaser.
          $output['#rows'][0]['#rows'][$key] = \Drupal::entityTypeManager()
            ->getViewBuilder('profile')
            ->view($user_profile, $view_mode);
        }
        else {
          // Remove output if user don't have profile (admin).
          unset($output['#rows'][0]['#rows'][$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function social_group_menu_local_tasks_alter(&$data, $route_name) {
  // Rename Group "Related Entities" tab.
  if (isset($data['tabs'][0]['group.content']['#link'])) {
    $data['tabs'][0]['group.content']['#link']['title'] = t('Manage members');
  }

  // Change the default 'View' tab title.
  if (isset($data['tabs'][0]['group.view']['#link'])) {
    $data['tabs'][0]['group.view']['#link']['title'] = t('Stream');
  }

  // Remove Edit tab. Edit will always go through Floating Edit Button.
  if (isset($data['tabs'][0]['group.edit_form'])) {
    unset($data['tabs'][0]['group.edit_form']);
  }

  $user = \Drupal::currentUser();
  // Get the Group object from the route.
  $group = Drupal::routeMatch()->getParameter('group');

  if ($group instanceof GroupInterface) {
    /** @var \Drupal\group\Entity\GroupTypeInterface $group_type */
    $group_type = $group->getGroupType()->id();
    // Check if it's a closed group.
    if ($group_type == 'closed_group') {
      // And if the user is not user 1.
      if ($user->id() != 1) {
        if ($user->hasPermission('manage all groups')) {
          return;
        }
        // If the user is not an member of this group.
        elseif (!$group->getMember($user)) {
          // Disable these local tasks.
          $data['tabs'][0]['group.view'] = [];
          $data['tabs'][0]['group.content'] = [];
          $data['tabs'][0]['social_group.events'] = [];
          $data['tabs'][0]['social_group.topics'] = [];
        }
      }
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function social_group_local_tasks_alter(&$local_tasks) {
  // Remove local delete task from group page.
  unset($local_tasks['group.delete_form']);
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function social_group_menu_local_actions_alter(&$local_actions) {
  // Remove "Add Relationship" button.
  if (isset($local_actions['group_content.add_page'])) {
    unset($local_actions['group_content.add_page']);
  }
  // Remove Create new entity in group.
  if (isset($local_actions['group_content.create_page'])) {
    unset($local_actions['group_content.create_page']);
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function social_group_entity_type_alter(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['group_content']->setListBuilderClass('Drupal\social_group\Controller\SocialGroupContentListBuilder');
}

/**
 * Return user profile by given group membership content.
 *
 * @param \Drupal\group\Entity\GroupContent $group_content
 *   Group content entity.
 *
 * @return \Drupal\profile\Entity\Profile
 *   Returns the Profile entity for the member.
 */
function _social_group_get_member_profile(GroupContent $group_content) {
  $user_profile = NULL;
  // Get User entity.
  $user_entity = $group_content->getEntity();
  if (!empty($user_entity)) {
    // Get Profile storage.
    $storage = \Drupal::entityTypeManager()->getStorage('profile');
    if (!empty($storage)) {
      // Get Profile entity.
      $user_profile = $storage->loadByUser($user_entity, 'profile');
    }
  }
  return $user_profile;
}

/**
 * Get current Group entity from the route.
 *
 * @return \Drupal\group\Entity\GroupInterface
 *   Returns the group object.
 */
function _social_group_get_current_group($node = NULL) {
  $group = \Drupal::routeMatch()->getParameter('group');

  if (!is_object($group) && !is_null($group)) {
    $group = \Drupal::entityTypeManager()
      ->getStorage('group')
      ->load($group);
  }
  else {
    $node = is_object($node) ? $node : \Drupal::routeMatch()->getParameter('node');
    if (is_object($node) && !is_null($node)) {
      $node_entity = [
        'target_type' => 'node',
        'target_id' => $node->id(),
      ];
      $gid_from_entity = SocialGroupHelperService::getGroupFromEntity($node_entity);
      if ($gid_from_entity !== NULL) {
        $group = \Drupal::entityTypeManager()
          ->getStorage('group')
          ->load($gid_from_entity);
      }
    }
  }

  return $group;
}

/**
 * Get group cache tags.
 *
 * @param \Drupal\group\Entity\GroupInterface $group
 *   The GroupInterface.
 *
 * @return array
 *   An array of cache tags related to groups.
 */
function _social_group_cache_tags(GroupInterface $group) {
  // Group views.
  $tags = [
    'group_list',
    'group_content_list',
    'group_view',
    'group_content_view',
  ];

  // Add cache tags that are based on id.
  $tags[] = 'group_hero:' . $group->id();
  // Add cache tags for the blocks.
  $tags[] = 'group_block:' . $group->id();

  $current_user = \Drupal::currentUser();
  if ($group_membership = $group->getMember($current_user)) {
    $group_content = $group_membership->getGroupContent();
    $tags[] = 'group_content:' . $group_content->id();
  }

  return $tags;
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 *
 * Add Group cache context for system "Tabs" block.
 */
function social_group_block_view_local_tasks_block_alter(array &$build, BlockPluginInterface $block) {
  $build['#cache']['contexts'][] = 'group_membership.roles.permissions';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function social_group_preprocess_profile(&$variables) {
  $group = _social_group_get_current_group();

  if ($group instanceof Group && $variables['elements']['#view_mode'] == 'teaser') {
    $account = $variables['elements']['#profile']->get('uid')->entity;

    if (!$member = $group->getMember($account)) {
      return;
    }

    $roles = $member->getRoles();

    if (isset($roles[$group->bundle() . '-group_manager'])) {
      $variables['badges'] = [
        [
          'label' => t('Group manager'),
          'classes' => ['badge-secondary teaser__badge'],
        ],
      ];
    }
  }
}

/**
 * Implements hook_block_access().
 *
 * Check if the user is viewing a closed_group, check if the user is a member.
 * If the user is not a member, the user has no access to view this block.
 */
function social_group_block_access(Block $block, $operation, AccountInterface $account) {
  if ($block->getPluginId() == 'views_exposed_filter_block:newest_groups-page_all_groups' && $operation == 'view' && $account->isAnonymous()) {
    $group_types = 0;

    /** @var \Drupal\group\Entity\GroupTypeInterface $group_type */
    foreach (GroupType::loadMultiple() as $group_type) {
      $permissions = $group_type->getAnonymousRole()->getPermissions();

      if (in_array('view group', $permissions)) {
        $group_types++;
      }
    }

    if ($group_types < 2) {
      return AccessResult::forbidden();
    }
  }

  $group = _social_group_get_current_group();
  $user = Drupal::currentUser();
  // Check if there is a group set and if its an closed group.
  if ($group && $group->getGroupType()->id() == 'closed_group' && $account->id() != 1) {
    if ($account->hasPermission('manage all groups')) {
      return AccessResult::neutral();
    }
    elseif (!$group->getMember($user)) {
      // If it is closed and the current user is not an member of this group,
      // then he is not allowed to see these blocks.
      $forbidden_blocks = [
        'views_block:upcoming_events-upcoming_events_group',
        'views_block:latest_topics-group_topics_block',
      ];
      foreach ($forbidden_blocks as $forbidden_block) {
        if ($operation == 'view' && $block->getPluginId() == $forbidden_block) {
          return AccessResult::forbidden();
        }
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Delete the group and all of its content.
 */
function _social_group_delete_closed_group() {
  // Get the group.
  $group = _social_group_get_current_group();
  // Make sure its a group of type closed_group.
  if ($group && $group->getGroupType()->id() == 'closed_group') {
    $group_content_types = GroupContentType::loadByEntityTypeId('node');
    $group_content_types = array_keys($group_content_types);

    // Get all the node's related to the current group.
    $query = \Drupal::database()->select('group_content_field_data', 'gcfd');
    $query->addField('gcfd', 'entity_id');
    $query->condition('gcfd.gid', $group->id());
    $query->condition('gcfd.type', $group_content_types, 'IN');
    $query->execute()->fetchAll();

    $entity_ids = $query->execute()->fetchAllAssoc('entity_id');
    // Store all the node ids.
    $nids = array_keys($entity_ids);

    // Get all the posts from this group.
    $query = \Drupal::database()->select('post__field_recipient_group', 'pfrg');
    $query->addField('pfrg', 'entity_id');
    $query->condition('pfrg.field_recipient_group_target_id', $group->id());
    $query->execute()->fetchAll();

    $post_ids = $query->execute()->fetchAllAssoc('entity_id');
    // Store all the post entity ids.
    $posts = array_keys($post_ids);

    // Pass the $nids and $posts as 2 parameters in the operations.
    // See /social_group/src/Controller/DeleteGroup.php for further process.
    $batch = [
      'title' => t('Deleting the group and all the content within the group...'),
      'init_message' => t("Preparing to delete the group and all it\'s topic\'s, event\'s and post\'s..."),
      'operations' => [
        [
          '\Drupal\social_group\Controller\DeleteGroup::deleteGroupAndContent',
          [$nids, $posts],
        ],
      ],
      'finished' => '\Drupal\social_group\Controller\DeleteGroup::deleteGroupAndContentFinishedCallback',
    ];
    batch_set($batch);
  }
}

/**
 * Get all open groups.
 */
function social_group_get_all_open_groups() {
  $query = Drupal::service('entity.query')
    ->get('group')
    ->condition('type', 'open_group');
  return $query->execute();
}

/**
 * Get all group memberships for a certain user.
 */
function social_group_get_all_group_members($uid) {
  $group_content_types = GroupContentType::loadByEntityTypeId('user');
  $group_content_types = array_keys($group_content_types);

  $query = \Drupal::database()->select('group_content_field_data', 'gcfd');
  $query->addField('gcfd', 'gid');
  $query->condition('gcfd.entity_id', $uid);
  $query->condition('gcfd.type', $group_content_types, 'IN');
  $query->execute()->fetchAll();

  $group_ids = $query->execute()->fetchAllAssoc('gid');
  return array_keys($group_ids);
}

/**
 * Implements hook_field_info_alter().
 */
function social_group_field_info_alter(&$info) {
  if (isset($info['groups'])) {
    $info['groups']['default widget'] = 'social_group_selector_widget';
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function social_group_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  $entity_types = ['node', 'user'];
  if (in_array($entity_type->id(), $entity_types)) {
    if (isset($fields['groups'])) {
      /* @var \Drupal\Core\Field\BaseFieldDefinition $fields['groups'] */
      $fields['groups']->setLabel(t('Group'));
      $fields['groups']->setDisplayOptions('form', [
        'type' => 'options_select',
        'settings' => [],
        'weight' => 16,
      ]);
      $fields['groups']->setDisplayConfigurable('form', TRUE);
      $fields['groups']->setDescription('');

    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Make sure the correct group is saved when group is selected on node form.
 */
function social_group_form_node_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['#entity_type']) && $form['#entity_type'] === 'node') {
    if (isset($form['groups'])) {
      $change_fieldgroup_titles = [
        'group_topic_visibility',
        'group_event_visibility',
      ];
      foreach ($change_fieldgroup_titles as $fieldgroup_title) {
        if (isset($form['#fieldgroups'][$fieldgroup_title])) {
          $form['#fieldgroups'][$fieldgroup_title]->label = (string) t('Group and visibility');
        }
      }
      // Lets remove the original submit function in favor of this submit.
      foreach ($form['actions']['submit']['#submit'] as $submit_key => $submit_function) {
        if ($submit_function === 'group_content_entity_submit') {
          unset($form['actions']['submit']['#submit'][$submit_key]);
        }
      }
      $form['actions']['submit']['#submit'][] = 'social_group_save_group_from_node';
    }
  }
}

/**
 * Form submit to save the group from a node form.
 *
 * @param array $form
 *   Node add or node edit form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function social_group_save_group_from_node(array $form, FormStateInterface $form_state) {
  /* @var \Drupal\node\Entity\Node $node */
  $node = $form_state->getFormObject()->getEntity();
  $original_groups = [];
  $groups_to_add = [];
  $groups_to_remove = [];
  foreach ($form_state->getValue('groups') as $new_group_key => $new_group) {
    $groups_to_add[$new_group['target_id']] = $new_group['target_id'];
  }
  // The node already exist so lets also change the logic accordingly.
  if ($form['#form_id'] === 'node_' . $node->bundle() . '_edit_form') {
    $original_groups = $form['groups']['widget']['#default_value'];
    foreach ($original_groups as $original_group_key => $original_group) {
      if (!in_array($original_group, $groups_to_add)) {
        $groups_to_remove[$original_group] = $original_group;
      }
      else {
        unset($groups_to_add[$original_group]);
      }
    }
  }

  // Now make sure the relevant GroupContent is removed or added.
  $setGroupsForNodeService = \Drupal::service('social_group.set_groups_for_node_service');
  $setGroupsForNodeService->setGroupsForNode($node, $groups_to_remove, $groups_to_add, $original_groups);
}

/**
 * Get the allowed visibility options for a given group type.
 *
 * @param string|null $group_type_id
 *   The group type. Can be NULL to get visibility when it is not in a group.
 * @param \Drupal\Core\Session\AccountInterface|null $account
 *   The account object that may have impact on the visibility options.
 *
 * @return array
 *   An array of visibility options for the given group type.
 */
function social_group_get_allowed_visibility_options_per_group_type($group_type_id, AccountInterface $account = NULL, $entity = NULL) {

  // Get the logged in user.
  if ($account === NULL) {
    $account = \Drupal::currentUser();
  }

  $visibility_options = [];
  $visibility_options['public'] = FALSE;
  $visibility_options['community'] = TRUE;
  $visibility_options['group'] = FALSE;

  switch ($group_type_id) {
    case 'closed_group':
      $visibility_options['community'] = FALSE;
      $visibility_options['group'] = TRUE;
      break;

    case 'public_group':
      $visibility_options['public'] = TRUE;
      $visibility_options['community'] = FALSE;
      break;

    case NULL:
      $config = \Drupal::config('entity_access_by_field.settings');
      $visibility_options['public'] = TRUE;
      if ($config->get('disable_public_visibility') === 1 && !$account->hasPermission('override disabled public visibility')) {
        // This is a new entity.
        if (!$entity) {
          $visibility_options['public'] = FALSE;
        }
        else {
          /** @var \Drupal\node\Entity\Node $entity */
          $current_visibility = $entity->get('field_content_visibility')->getString();
          if ($current_visibility !== 'public') {
            $visibility_options['public'] = FALSE;
          }
        }
      }
      $visibility_options['community'] = TRUE;
      $visibility_options['group'] = FALSE;
      break;
  }
  return $visibility_options;
}

/**
 * Implements hook_views_query_alter().
 */
function social_group_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (\Drupal::currentUser()->isAuthenticated()) {
    return;
  }

  if (empty($view->rowPlugin) || !($view->rowPlugin instanceof EntityRow) || $view->rowPlugin->getEntityTypeId() != 'group') {
    return;
  }

  $found = FALSE;

  foreach ($query->where as &$conditions) {
    foreach ($conditions['conditions'] as &$condition) {
      if ($condition['field'] == 'groups_field_data.type') {
        $found = TRUE;
        break 2;
      }
    }
  }

  if (!$found) {
    $condition = [
      'field' => 'groups_field_data.type',
      'value' => [],
      'operator' => 'not in',
    ];
  }

  $hiddens = $condition['operator'] == 'not in';

  /** @var \Drupal\group\Entity\GroupTypeInterface $group_type */
  foreach (GroupType::loadMultiple() as $group_type) {
    $new = !in_array($group_type->id(), $condition['value']);
    $permissions = $group_type->getAnonymousRole()->getPermissions();
    $hidden = !in_array('view group', $permissions);

    if ($new && $hiddens == $hidden) {
      $condition['value'][] = $group_type->id();
    }
  }

  if (!$found) {
    $conditions['conditions'][] = $condition;
  }
}
