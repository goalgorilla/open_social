<?php

/**
 * @file
 * The Social group module.
 */

use Drupal\group\Entity\Group;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\Core\Url;
use Drupal\Core\Cache\Cache;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\user\Entity\User;
use Drupal\profile\Entity\Profile;

/**
 * @file
 * The Social group module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_group_open_group_edit_form_submit';
  // Hide default title from Address field.
  if (isset($form['field_group_address'])) {
    $form['field_group_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_group_open_group_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom submit handler just for redirect purposes.
  $form['actions']['submit']['#submit'][] = '_social_group_group_open_group_edit_form_submit';
  // Hide default title from Address field.
  if (isset($form['field_group_address'])) {
    $form['field_group_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Form submit for group_open_group_add_form and group_open_group_edit_form.
 *
 * @param array $form
 *   Group add or group edit form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function _social_group_group_open_group_edit_form_submit($form, FormStateInterface $form_state) {
  // Set redirect to the group overview page when user saves a group.
  $form_state->setRedirect(
    'view.groups.page_user_groups',
    array('user' => \Drupal::currentUser()->id(), array())
  );
}

/**
 * Prepares variables for profile templates.
 *
 * Default template: profile.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - profile: The profile object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function social_group_preprocess_group(&$variables) {
  $group = $variables['group'];
  $variables['joined'] = FALSE;

  $account = \Drupal::currentUser();

  // Set joined to true for teaser when current logged in
  // user is member of the group.
  if ($group->getMember($account)) {
    $variables['joined'] = TRUE;
    if ($group->hasPermission('leave group', $account)) {
      // @todo switch this to get URL from routes correctly.
      $variables['group_operations_url'] = Url::fromUserInput('/group/' . $group->id() . '/leave');
    }
  }
  elseif ($group->hasPermission('join group', $account)) {
    // @todo switch this to get URL from routes correctly.
    $variables['group_operations_url'] = Url::fromUserInput('/group/' . $group->id() . '/join');
  }

  // Add the hero styled image.
  if (!empty($group->field_group_image->entity)) {
    $variables['group_hero_styled_image_url'] = ImageStyle::load('social_xx_large')
      ->buildUrl($group->field_group_image->entity->getFileUri());
  }

  // Add group edit url for management.
  if ($group instanceof Group) {
    // Get the current route name to check if the user is on the edit or delete page.
    $route = \Drupal::routeMatch()->getRouteName();
    if (!in_array($route, array('entity.group.edit_form', 'entity.group.delete_form'))) {
      if ($group->access('update', $account)) {
        $variables['group_edit_url'] = $group->toUrl('edit-form')->toString();
        $variables['#cache']['contexts'][] = 'route.name';
      }
    }
  }
  // Count number of group members.
  $members = $group->getMembers();
  $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

  $members_count = 0;
  if ($members && $profile_storage) {
    foreach ($members as $member) {
      $member_account = $member->getUser();
      if ($member_account instanceof User) {
        $member_profile = $profile_storage->loadByUser($member_account, 'profile');
        if ($member_profile instanceof Profile) {
          $members_count++;
        }
      }
    }
  }
  $variables['group_members'] = $members_count;
}

/**
 * Implements hook_entity_insert().
 *
 * On a new group insert, from the type open group the Owner gets the
 * group manager role by default.
 */
function social_group_group_insert(GroupInterface $group) {
  // @Todo remove this when https://www.drupal.org/node/2702743 lands and make
  // sure the settings will be implemented accordingly.
  if ($group->getGroupType()->id() == 'open_group') {
    // Get the group owner.
    $account = $group->getOwner();
    // Get membership.
    $content = $group->getMember($account)->getGroupContent();
    // Delete the initial created membership.
    $content->delete();

    // Create a new membership.
    $plugin = $group->getGroupType()->getContentPlugin('group_membership');
    $values = array('group_roles' => array('open_group-group_manager'));
    $group_content = GroupContent::create([
        'type' => $plugin->getContentTypeConfigId(),
        'gid' => $group->id(),
        'entity_id' => $group->getOwnerId(),
      ] + $values
    );
    $group_content->save();

  }
}



/**
 * Implements hook_entity_view_alter().
 */
function social_group_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  // For group entities.
  if ($entity instanceof Group) {
    // Add cache contexts for the hero view mode.
    if ($build['#view_mode'] == 'hero') {
      // Add cache contexts for group type & permissions. We need join / leave for
      // the CTA and also update permissions for the button to edit a group.
      $build['#cache']['contexts'][] = 'group.type';
      $build['#cache']['contexts'][] = 'group_membership.roles.permissions';
      $build['#cache']['contexts'][] = 'group_membership.audience';
      $build['#cache']['tags'][] = 'group_block:' . $entity->id();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $action_forms = array(
    'group_content_open_group-group_membership_group-join_form',
    'group_content_open_group-group_membership_group-leave_form',
    'group_content_open_group-group_membership_add_form',
  );

  // Perform alterations on joining / leaving groups.
  if ($form_id == 'group_content_open_group-group_membership_delete_form') {
    $form['actions']['submit']['#submit'][] = '_social_membership_delete_form_submit';
  }


  // Perform alterations on joining / leaving groups.
  if (in_array($form_id, $action_forms)) {

    // Add cancel option on join and leave form.
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#submit' => array('_social_group_cancel_join_leave_form'),
      '#limit_validation_errors' => array(),
    );

    $form['actions']['submit']['#submit'][] = '_social_group_action_form_submit';
  }

  $membership_forms = array(
    'group_content_open_group-group_membership_edit_form',
    'group_content_open_group-group_membership_add_form',
  );
  if (in_array($form_id, $membership_forms)) {
    // Change titles on membership forms.
    $form['entity_id']['widget'][0]['target_id']['#title'] = t('Select a member');
    $form['group_roles']['widget']['#title'] = t('Group roles');

    if ('group_content_open_group-group_membership_edit_form' == $form_id) {
      // Remove the user selection autocomplete on editing group membership.
      $form['entity_id']['#access'] = FALSE;

      // Add redirect to Group Membership page.
      $form['actions']['submit']['#submit'][] = '_social_group_membership_edit_form_submit';
    }
  }

  $content_forms = array(
    'group_content_open_group-group_node-topic_gnode-form_form',
    'group_content_open_group-group_node-event_gnode-form_form',
  );
  // Check if form is group content create form.
  // @TODO: Remove or fix checking of second step when group module changes.
  if (in_array($form_id, $content_forms) && $form['actions']['submit']['#value'] == 'Create node in group') {
    // Add custom submit handler just for redirect purposes. We don't want to
    // override the form::save in group.
    $form['actions']['submit']['#submit'][] = '_social_group_node_form_submit';
  }
}

/**
 * Form submit for removing members from a group so we can clear caches.
 */
function _social_membership_delete_form_submit($form, FormStateInterface $form_state) {
  $group = _social_group_get_current_group();

  if (is_object($group)) {
    // Invalidate cache tags.
    $cache_tags = _social_group_cache_tags($group);
    foreach ($cache_tags as $cache_tag) {
      Cache::invalidateTags(array($cache_tag));
    }
  }
}

/**
 * Form submit for group join / leave form.
 *
 */
function _social_group_action_form_submit($form, FormStateInterface $form_state) {
  $group = _social_group_get_current_group();

  if (is_object($group)) {
    // Invalidate cache tags.
    $cache_tags = _social_group_cache_tags($group);
    foreach ($cache_tags as $cache_tag) {
      Cache::invalidateTags(array($cache_tag));
    }

    // Get form that was submitted.
    $complete_form = $form_state->getCompleteForm();

    if ($complete_form['#form_id'] == 'group_content_open_group-group_membership_group-join_form') {
      // Set redirect to group home page.
      $form_state->setRedirect(
        'entity.group.canonical',
        array('group' => $group->id(), array())
      );
    }
    else {
      // Set redirect to the Group overview page when a user saves their profile.
      $form_state->setRedirect(
        'view.groups.page_user_groups',
        array('user' => \Drupal::currentUser()->id(), array())
      );
    }
  }
}

/**
 * Form submit for membership edit form.
 *
 * @param array $form
 *   Membership edit form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function _social_group_membership_edit_form_submit($form, FormStateInterface $form_state) {
  $group = _social_group_get_current_group();

  if (is_object($group)) {
    // Set redirect to the Group overview page when a user saves their profile.
    $form_state->setRedirect(
      'entity.group_content.collection',
      array('group' => $group->id(), array())
    );
  }
}

/**
 * Form cancel for join and leave form.
 *
 * @param array $form
 *   Join and leave form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function _social_group_cancel_join_leave_form($form, FormStateInterface $form_state) {
  // Get form that was submitted.
  $group = _social_group_get_current_group();

  if (is_object($group)) {
    // Set redirect only for cancel buttons. Just go back to the group page.
    $form_state->setRedirect(
      'entity.group.canonical',
      array('group' => $group->id(), array())
    );
  }
}

/**
 * Form submit for group content create form.
 *
 * @param array $form
 *   Group node form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 */
function _social_group_node_form_submit($form, FormStateInterface $form_state) {
  // Set redirect after group content creation to the default node '/node/%nid'
  // not to the group node.
  $route_params = $form_state->getRedirect()->getRouteParameters();
  if (!empty($route_params['group_content'])) {
    // Get node reference.
    $group_content = \Drupal::entityTypeManager()
      ->getStorage('group_content')
      ->load($route_params['group_content']);
    $group_entity_id = $group_content->get('entity_id')->getValue();
    $node_reference = reset($group_entity_id);
    // Set redirect.
    $form_state->setRedirect(
      'entity.node.canonical',
      array('node' => $node_reference['target_id'], array())
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function social_group_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {

  // Add a css class to widget form elements for all fields of type mytype.
  $field_definition = $context['items']->getFieldDefinition();

  // Unset the public options on visibility field.
  if ($field_definition->getType() == 'entity_access_field') {

    // Edit node forms. (public option is not allowed in groups)
    // This is only here for visual purpose. Group node permissions will
    // override the hook_node_access check implemented.
    $build_info = $form_state->getBuildInfo();
    $node_forms = array(
      'node_topic_gnode-form_form',
      'node_event_gnode-form_form',
      'node_topic_edit_form',
      'node_event_edit_form',
    );
    if (in_array($build_info['form_id'], $node_forms)) {
      // Check if we are editing a node.
      $node = \Drupal::routeMatch()->getParameter('node');
      if ($node) {

        // Only react if it is actually posted inside a group.
        $groupcontents = GroupContent::loadByEntity($node);
        if (!empty($groupcontents)) {
          unset($element['#options']['public']);
        }
      }
      else {
        // WE must be creating a node (in the group context).
        unset($element['#options']['public']);
      }
    }
  }
}

/**
 * Implements hook_views_post_render().
 *
 * Alter "Group Members" views. Replace user IDs with profile teasers.
 */
function social_group_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() == 'group_members') {
    if(!empty($output['#rows'][0]['#rows'])){
      foreach ($output['#rows'][0]['#rows'] as $key => $row) {
        // Get Group membership content entity.
        $group_content = $row['#group_content'];
        // Get Profile.
        $user_profile = _social_group_get_member_profile($group_content);
        if ($user_profile) {
          // Use teaser for page and small_teaser for block.
          $view_mode = ($view->current_display === 'block_newest_members') ? 'small_teaser' : 'teaser';
          // Replace output with profile teaser.
          $output['#rows'][0]['#rows'][$key] = \Drupal::entityTypeManager()
            ->getViewBuilder('profile')
            ->view($user_profile, $view_mode);
        }
        else {
          // Remove output if user don't have profile (admin).
          unset($output['#rows'][0]['#rows'][$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function social_group_menu_local_tasks_alter(&$data, $route_name) {
  // Rename Group "Related Entities" tab.
  if (isset($data['tabs'][0]['group.content']['#link'])) {
    $data['tabs'][0]['group.content']['#link']['title'] = t('Manage members');
  }

  // Change the default 'View' tab title.
  if (isset($data['tabs'][0]['group.view']['#link'])) {
    $data['tabs'][0]['group.view']['#link']['title'] = t('Stream');
  }

  // Remove Edit tab. Edit will always go through Floating Edit Button.
  if (isset($data['tabs'][0]['group.edit_form'])) {
    unset($data['tabs'][0]['group.edit_form']);
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function social_group_local_tasks_alter(&$local_tasks) {
  // Remove local delete task from group page.
  unset($local_tasks['group.delete_form']);
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function social_group_menu_local_actions_alter(&$local_actions) {
  // Remove "Add Relationship" button.
  if (isset($local_actions['group_content.add_page'])) {
    unset($local_actions['group_content.add_page']);
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function social_group_entity_type_alter(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['group_content']->setListBuilderClass('Drupal\social_group\Controller\SocialGroupContentListBuilder');
}

/**
 * Return user profile by given group membership content.
 *
 * @param \Drupal\group\Entity\GroupContent $group_content
 *   Group content entity.
 *
 * @return \Drupal\profile\Entity\Profile
 *   Returns the Profile entity for the member.
 */
function _social_group_get_member_profile(GroupContent $group_content) {
  $user_profile = NULL;
  // Get User entity.
  $user_entity = $group_content->getEntity();
  if (!empty($user_entity)) {
    // Get Profile storage.
    $storage = \Drupal::entityTypeManager()->getStorage('profile');
    if (!empty($storage)) {
      // Get Profile entity.
      $user_profile = $storage->loadByUser($user_entity, 'profile');
    }
  }
  return $user_profile;
}

/**
 * Get current Group entity from the route.
 *
 * @return \Drupal\group\Entity\GroupInterface
 */
function _social_group_get_current_group() {
  $group = \Drupal::routeMatch()->getParameter('group');

  if (!is_object($group) && !is_null($group)) {
    $group = \Drupal::entityTypeManager()
      ->getStorage('group')
      ->load($group);
  }

  return $group;
}

/**
 * Get group cache tags
 *
 * @param \Drupal\group\Entity\GroupInterface $group
 *
 * @return array An array of cache tags related to groups.
 */
function _social_group_cache_tags(GroupInterface $group) {
  // Group views.
  $tags = [
    'group_list',
    'group_content_list',
    'group_view',
    'group_content_view',
  ];

  // Add cachetags that are based on id.
  $tags[] = 'group_hero:' . $group->id();
  // Add cache tags for the blocks.
  $tags[] = 'group_block:' . $group->id();

  $current_user = \Drupal::currentUser();
  if ($group_membership = $group->getMember($current_user)) {
    $group_content = $group_membership->getGroupContent();
    $tags[] = 'group_content:' . $group_content->id();
  }

  return $tags;
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 *
 * Add Group cache context for system "Tabs" block.
 */
function social_group_block_view_local_tasks_block_alter(array &$build, BlockPluginInterface $block) {
  $build['#cache']['contexts'][] = 'group_membership.roles.permissions';
}
