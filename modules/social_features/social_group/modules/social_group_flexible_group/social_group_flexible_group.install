<?php

/**
 * @file
 * Install and update functions for the social_group_flexible_group module.
 */

/**
 * Implements hook_install().
 */
function social_group_flexible_group_install() {
  // Grant the default permissions for this feature.
  user_role_grant_permissions(
    'verified',
    [
      'create flexible_group group',
    ]
  );
  user_role_grant_permissions(
    'contentmanager',
    [
      'create flexible_group group',
    ]
  );
  user_role_grant_permissions(
    'sitemanager',
    [
      'create flexible_group group',
    ]
  );

  // Set module weight higher as the weight of the "Social Group" module because
  // needs have the Views group type field which added via the "Social Group"
  // module.
  module_set_weight('social_group_flexible_group', 5);
}

/**
 * Implements hook_update_last_removed().
 */
function social_group_flexible_group_update_last_removed() : int {
  return 111103;
}

/**
 * Add taxonomy permission with the Taxonomy Access Fix is enabled.
 */
function social_group_flexible_group_update_120001(): void {
  // Nothing to do if the module is not installed.
  if (!\Drupal::moduleHandler()->moduleExists("taxonomy_access_fix")) {
    return;
  }

  // Permission to grant.
  $taxonomy_permissions = [
    'view terms in group_type',
    'view term names in group_type',
    'select terms in group_type',
  ];

  // Load the permission.
  $entity_type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\user\RoleInterface $role */
  $role = $entity_type_manager->getStorage('user_role')->load('authenticated');

  // If the role is not have the permission, grant permission.
  foreach ($taxonomy_permissions as $taxonomy_permission) {
    if (!$role->hasPermission($taxonomy_permission)) {
      $role->grantPermission($taxonomy_permission);
      $role->save();
    }
  }
}
