<?php

/**
 * @file
 * Install and update functions for the social_group_flexible_group module.
 */

/**
 * Implements hook_install().
 */
function social_group_flexible_group_install() {
  // Grant the default permissions for this feature.
  user_role_grant_permissions(
    'verified',
    [
      'create flexible_group group',
    ]
  );
  user_role_grant_permissions(
    'contentmanager',
    [
      'create flexible_group group',
    ]
  );
  user_role_grant_permissions(
    'sitemanager',
    [
      'create flexible_group group',
      'create terms in group_type',
      'edit terms in group_type',
      'delete terms in group_type',
    ]
  );

  // Set module weight higher as the weight of the "Social Group" module because
  // needs have the Views group type field which added via the "Social Group"
  // module.
  module_set_weight('social_group_flexible_group', 5);
}

/**
 * Implements hook_update_last_removed().
 */
function social_group_flexible_group_update_last_removed() : int {
  return 111103;
}

/**
 * Add taxonomy permission with the Taxonomy Access Fix is enabled.
 */
function social_group_flexible_group_update_120001(): void {
  // Nothing to do if the module is not installed.
  if (!\Drupal::moduleHandler()->moduleExists("taxonomy_access_fix")) {
    return;
  }

  // Permission to grant.
  $taxonomy_permissions = [
    'view terms in group_type',
    'view term names in group_type',
    'select terms in group_type',
  ];

  // Load the permission.
  $entity_type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\user\RoleInterface $role */
  $role = $entity_type_manager->getStorage('user_role')->load('authenticated');

  // If the role is not have the permission, grant permission.
  foreach ($taxonomy_permissions as $taxonomy_permission) {
    if (!$role->hasPermission($taxonomy_permission)) {
      $role->grantPermission($taxonomy_permission);
      $role->save();
    }
  }
}

/**
 * Remove redundant "social_group_type_required" settings.
 */
function social_group_flexible_group_update_130000(): void {
  \Drupal::configFactory()
    ->getEditable('social_group.settings')
    ->clear('social_group_type_required')
    ->save();
}

/**
 * Grant permissions for site manager to manage terms in group_type vocabulary.
 */
function social_group_flexible_group_update_130001(): void {
  $permissions = [
    'create terms in group_type',
    'edit terms in group_type',
    'delete terms in group_type',
  ];
  user_role_grant_permissions('sitemanager', $permissions);
}

/**
 * Add new group permissions to group-member/manager roles.
 */
function social_group_flexible_group_update_130002(): void {
  // After group upgrade 'content' replaced with 'relationship' permission.
  // So, need to assign new permissions for user roles to adjust access to
  // group relationship items.
  $group_permissions['flexible_group-member'] = [
    'view group_node:topic relationship',
  ];

  // Group manager.
  $group_permissions['flexible_group-group_manager'] = $group_permissions['flexible_group-member'];

  /** @var \Drupal\group\Entity\GroupTypeInterface $group_type */
  $group_type = \Drupal::entityTypeManager()
    ->getStorage('group_type')
    ->load('flexible_group');

  foreach ($group_type->getRoles() as $role) {
    if (!empty($group_permissions[$role->id()])) {
      $role->grantPermissions($group_permissions[$role->id()])
        ->save();
    }
  }
}
