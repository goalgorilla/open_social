<?php

/**
 * @file
 * Install, update and uninstall functions for social_group_quickjoin module.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_group_quickjoin.
 */
function social_group_quickjoin_install() {
  // Fetch sitemananger role.
  $role = Role::load('sitemanager');
  // Set permission for site manager.
  if ($role instanceof Role) {
    // Set permission.
    $role->grantPermission('set group quickjoin settings');
    try {
      $role->trustData()->save();
    }
    catch (EntityStorageException $e) {
      \Drupal::logger('social_group_quickjoin')->critical($e->getMessage());
    }

  }
}

/**
 * Implements hook_uninstall().
 *
 * Perform actions related to the de-installation of social_group_quickjoin.
 */
function social_group_quickjoin_uninstall() {
  // Fetch sitemananger role.
  $role = Role::load('sitemanager');
  // Set permission for site manager.
  if ($role instanceof Role) {
    // Set permission.
    $role->revokePermission('set group quickjoin settings');
    try {
      $role->trustData()->save();
    }
    catch (EntityStorageException $e) {
      \Drupal::logger('social_group_quickjoin')->critical($e->getMessage());
    }
  }

  // Also remove the fields and the vocabulary.
  \Drupal::configFactory()->getEditable('field.field.node.event.field_event_type')->delete();
}

/**
 * Implements hook_update_dependencies().
 */
function social_group_quickjoin_update_dependencies() : array {
  // Ensure configurations updates runs after the group migration has completed.
  $dependencies['social_group_quickjoin'][13000] = [
    'social_group' => 13000,
  ];

  $dependencies['social_group'][13001] = [
    'social_group_quickjoin' => 13000,
  ];

  return $dependencies;
}

/**
 * Remove deprecated group types.
 */
function social_group_quickjoin_update_13000(): ?string {
  // Allow platforms to opt out of the group migration, for example if they want
  // to build it themselves and take more scenario's into account than common
  // Open Social installations will have.
  if (\Drupal::state()->get('social_group_group_type_migration_opt_out', FALSE)) {
    \Drupal::logger('social_group')->info('Platform has opted out of group migration.');
    return NULL;
  }

  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_group_quickjoin', __FUNCTION__);

  // Output logged messages to a related channel of update execution.
  return $updateHelper->logger()->output();
}
