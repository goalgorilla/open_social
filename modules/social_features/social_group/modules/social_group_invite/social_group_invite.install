<?php

/**
 * @file
 * Install, update and uninstall functions for the social_group_invite module.
 */

use Drupal\group\Entity\GroupType;

/**
 * Implements hook_install().
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function social_group_invite_install() {
  // Assign permissions by default to all group types
  // that have group_invitation enabled.
  foreach (GroupType::loadMultiple() as $group_type) {
    if ($group_type->hasContentPlugin('group_invitation')) {
      social_group_invite_set_default_permissions_for_group_type($group_type);
    }
  }
}

/**
 * Implements hook_update_dependencies().
 */
function social_group_invite_update_dependencies() : array {
  // Ensure configurations updates runs after the group migration has completed.
  $dependencies['social_group_invite'][13000] = [
    'social_group' => 13000,
  ];

  $dependencies['social_group'][13001] = [
    'social_group_invite' => 13000,
  ];

  return $dependencies;
}

/**
 * Implements hook_update_last_removed().
 */
function social_group_invite_update_last_removed() : int {
  return 11503;
}

/**
 * Remove deprecated group types.
 */
function social_group_invite_update_13000(): ?string {
  // Allow platforms to opt out of the group migration, for example if they want
  // to build it themselves and take more scenario's into account than common
  // Open Social installations will have.
  if (\Drupal::state()->get('social_group_group_type_migration_opt_out', FALSE)) {
    \Drupal::logger('social_group')->info('Platform has opted out of group migration.');
    return NULL;
  }

  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_group_invite', __FUNCTION__);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}
