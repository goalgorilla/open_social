<?php

/**
 * @file
 * Module file for Social Comment Upload.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the weight of the actions, so the upload is last.
 */
function social_comment_upload_form_comment_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['field_comment_files'])) {
    $form['field_comment_files']['widget']['#file_upload_title'] = '';
    $form['#attached']['library'][] = 'social_comment_upload/comment_upload';
    $form['#after_build'][] = 'social_comment_upload_form_comment_comment_form_after_build';
    // Workaround for fixing behat tests,
    // which is caused by alter in social_comment module.
    $form['field_comment_files']['#weight'] = 9;
    $form['actions']['#weight'] = 8;
  }
}

/**
 * Removes the select list with "weight" value.
 */
function social_comment_upload_form_comment_comment_form_after_build($form, FormStateInterface $form_state) {
  foreach ($form['field_comment_files']['widget'] as $key => &$element) {
    if (is_array($element) && isset($element['_weight'])) {
      unset($element['_weight']);
    }
  }
  return $form;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function social_comment_upload_preprocess_file_widget_multiple(&$variables) {
  $element = $variables['element'];

  if ($element['#field_name'] == 'field_comment_files') {
    // Remove "weight" column.
    foreach ($variables['table']['#rows'] as $key => $row) {
      if (!empty($element['#display_field'])) {
        unset($variables['table']['#rows'][$key]['data'][2]);
      }
      else {
        unset($variables['table']['#rows'][$key]['data'][1]);
      }
    }

    // Remove headers and disable sorting rows.
    $variables['table']['#header'] = [];
    $variables['table']['#tabledrag'] = [];
  }
}

/**
 * Implements hook_comment_delete().
 */
function social_comment_upload_comment_delete(Drupal\Core\Entity\EntityInterface $entity) {
  // Loop through the files in the comment.
  foreach ($entity->field_comment_files as $filefield) {
    // Try to load the actual file object.
    $file = \Drupal\file\Entity\File::load($filefield->target_id);
    // Check if it's an actual file object.
    if ($file instanceof \Drupal\file\Entity\File) {
      // Delete the file object.
      $file->delete();
    }
  }

}
