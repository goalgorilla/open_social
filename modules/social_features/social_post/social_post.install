<?php

/**
 * @file
 * Install, update and uninstall functions for the social_post module.
 */

use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\Entity\EntityViewMode;
use Drupal\Core\Site\Settings;
use Drupal\user\RoleInterface;

/**
 * PROCEED WITH CARE HERE!
 *
 * The below issue causes updates from the social_post module to be recognizes
 * as post updates from the social profile.
 *
 * Therefore don't create update hooks here!!!!
 *
 * https://www.drupal.org/node/2880361
 */

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_post.
 */
function social_post_install() {
  // Grant the default permissions for this feature.
  user_role_grant_permissions(
    RoleInterface::ANONYMOUS_ID,
    [
      'view public posts',
      'view published post entities',
    ]
  );
  user_role_grant_permissions(
    RoleInterface::AUTHENTICATED_ID,
    [
      'view public posts',
      'view published post entities',
    ]
  );
  user_role_grant_permissions(
    'verified',
    [
      'add post entities',
      'add post post entities',
      'delete own post entities',
      'edit own post entities',
      'view community posts',
      'view own unpublished post entities',
    ]
  );
  user_role_grant_permissions(
    'contentmanager',
    [
      'add post entities',
      'add post post entities',
      'delete own post entities',
      'edit own post entities',
      'view community posts',
      'view own unpublished post entities',
      'delete any post entities',
      'edit any post entities',
      'view unpublished post entities',
      'administer post entities',
    ]
  );
  user_role_grant_permissions(
    'sitemanager',
    [
      'add post entities',
      'add post post entities',
      'delete own post entities',
      'edit own post entities',
      'view community posts',
      'view own unpublished post entities',
      'delete any post entities',
      'edit any post entities',
      'view unpublished post entities',
      'administer post entities',
    ]
  );

  // Set the view mode for posts in activities.
  activity_creator_set_entity_view_mode('post', 'activity');
}

/**
 * Implements hook_update_dependencies().
 */
function social_post_update_dependencies() {
  // Run the activities view mode update after the final features removal ran.
  $dependencies['social_post'][8801] = [
    'social_core' => 8802,
  ];

  return $dependencies;
}

/**
 * Set the view mode to use when shown in activities.
 */
function social_post_update_8801() {
  activity_creator_set_entity_view_mode('post', 'activity');
}

/**
 * Give access to creating posts of specific types.
 */
function social_post_update_8802(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $sandbox['total'] = \Drupal::entityQuery('user_role')
      ->condition('id', 'administrator', '<>')
      ->count()
      ->execute();

    $sandbox['processed'] = 0;
    $sandbox['limit'] = Settings::get('entity_update_batch_size', 50);
    $sandbox['permissions'] = array_keys(\Drupal::service('social_post.permission_generator')->permissions());
  }

  $role_ids = \Drupal::entityQuery('user_role')
    ->condition('id', 'administrator', '<>')
    ->range($sandbox['processed'], $sandbox['limit'])
    ->execute();

  $storage = \Drupal::entityTypeManager()->getStorage('user_role');

  foreach ($role_ids as $role_id) {
    /** @var \Drupal\user\RoleInterface $role */
    $role = $storage->load($role_id);

    if ($role->hasPermission('add post entities')) {
      user_role_grant_permissions($role_id, $sandbox['permissions']);
    }
  }

  $sandbox['processed'] += count($role_ids);

  $sandbox['#finished'] = $sandbox['processed'] / $sandbox['total'];
}

/**
 * Create "Featured" view mode/display for post.
 */
function social_post_update_8804() {
  // Create a new post featured entity view mode.
  if (!EntityViewMode::load('post.featured')) {
    EntityViewMode::create([
      'targetEntityType' => 'post',
      'id' => 'post.featured',
      'status' => TRUE,
      'label' => t('Featured'),
    ])->save();
  }

  // Create view display for post bundle of Post entity.
  if (!EntityViewDisplay::load('post.post.featured')) {
    $display = EntityViewDisplay::load('post.post.default')->toArray();
    unset(
      $display['content']['field_post_comments'],
      $display['hidden']['like_and_dislike']
    );
    $display['content']['like_and_dislike'] = [
      'weight' => 3,
      'region' => 'content',
    ];
    $display = array_merge($display, [
      'uuid' => NULL,
      '_core' => NULL,
      'targetEntityType' => 'post',
      'mode' => 'featured',
    ]);
    EntityViewDisplay::create($display)->save();
  }
}

/**
 * Update likes in post activity and comment view modes.
 */
function social_post_update_8901() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_post', 'social_post_update_8901');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update exposed filter button name.
 */
function social_post_update_11401(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_post', __FUNCTION__);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}
