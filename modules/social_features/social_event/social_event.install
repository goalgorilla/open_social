<?php

/**
 * @file
 * Install, update and uninstall functions for the social_event module.
 */

use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\user\RoleInterface;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_event.
 */
function social_event_install() {
  // Grant the default permissions for this feature.
  user_role_grant_permissions(
    RoleInterface::ANONYMOUS_ID,
    [
      'view node.event.field_content_visibility:public content',
    ]
  );
  user_role_grant_permissions(
    RoleInterface::AUTHENTICATED_ID,
    [
      'view node.event.field_content_visibility:public content',
    ]
  );
  user_role_grant_permissions(
    'verified',
    [
      'create event content',
      'delete own event content',
      'edit own event content',
      'override event published option',
      'view node.event.field_content_visibility:community content',
      'view events on my profile',
      'view events on other profiles',
    ]
  );
  user_role_grant_permissions(
    'contentmanager',
    [
      'create event content',
      'delete own event content',
      'edit own event content',
      'override event published option',
      'view node.event.field_content_visibility:community content',
      'view events on my profile',
      'view events on other profiles',
      'delete any event content',
      'edit any event content',
      'revert event revisions',
      'delete event revisions',
      'view event revisions',
      'override event authored by option',
      'override event authored on option',
      'override event promote to front page option',
      'override event revision option',
      'override event sticky option',
    ]
  );
  user_role_grant_permissions(
    'sitemanager',
    [
      'create event content',
      'delete own event content',
      'edit own event content',
      'override event published option',
      'view node.event.field_content_visibility:community content',
      'view events on my profile',
      'view events on other profiles',
      'delete any event content',
      'edit any event content',
      'revert event revisions',
      'delete event revisions',
      'view event revisions',
      'override event authored by option',
      'override event authored on option',
      'override event promote to front page option',
      'override event revision option',
      'override event sticky option',
      'administer visibility settings',
      'administer social_event settings',
      'view published event enrollment entities',
    ]
  );
  // Add menu links.
  $parents = \Drupal::entityTypeManager()->getStorage('menu_link_content')
    ->loadByProperties(['menu_name' => 'main', 'title' => 'Explore', 'expanded' => TRUE]);
  $parent = reset($parents);
  if ($parent !== FALSE) {
    MenuLinkContent::create([
      'title' => t('All events'),
      'link' => ['uri' => 'internal:/community-events'],
      'menu_name' => 'main',
      'expanded' => FALSE,
      'weight' => 30,
      'parent' => 'menu_link_content:' . $parent->uuid(),
    ])->save();
  }
}

/**
 * Implements hook_update_dependencies().
 */
function social_event_update_dependencies(): array {
  // Ensure configurations updates runs after the group migration has completed,
  // but before the group types are removed.
  $dependencies['social_event'][130000] = [
    'social_group' => 13000,
  ];
  $dependencies['social_group'][13001] = [
    'social_event' => 130000,
  ];

  return $dependencies;
}

/**
 * Implements hook_update_last_removed().
 */
function social_event_update_last_removed() : int {
  return 111102;
}

/**
 * Change the More Link from Event Enrollments view.
 */
function social_event_update_121001(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_event', __FUNCTION__);

  // Output logged messages to a related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Remove deprecated group types.
 */
function social_event_update_130000(): ?string {
  // Allow platforms to opt out of the group migration, for example if they want
  // to build it themselves and take more scenario's into account than common
  // Open Social installations will have.
  if (\Drupal::state()->get('social_group_group_type_migration_opt_out', FALSE)) {
    \Drupal::logger('social_group')->info('Platform has opted out of group migration.');
    return NULL;
  }

  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_event', __FUNCTION__);

  // Output logged messages to a related channel of update execution.
  return $updateHelper->logger()->output();
}
