<?php

/**
 * @file
 * Install, update and uninstall functions for the social_core module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Field\FieldItemList;
use Drupal\Core\File\FileSystemInterface;
use Drupal\crop\Entity\CropType;
use Drupal\file\Entity\File;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\user\RoleInterface;
use Drupal\views\Entity\View;

/**
 * Implements hook_requirements().
 */
function social_core_requirements($phase) {
  $requirements = [];

  switch ($phase) {
    case 'update':
      // From 9.0 on-wards a site must update to 8.1 first to ensure that the
      // features removal update hooks have run that are no longer present in
      // Open Social 9.0.
      if (\Drupal::service('update.update_hook_registry')->getInstalledVersion('social_core') <= 8805) {
        $requirements['social_core_update_version'] = [
          'title' => t('Open Social Update Version'),
          'description' => t('You must update Open Social to the latest version of 8.x before upgrading to 9.0 or later.'),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
      break;

  }

  return $requirements;
}

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_core.
 */
function social_core_install() {
  // Grant the default permissions for this feature.
  user_role_grant_permissions(
    RoleInterface::ANONYMOUS_ID,
    [
      'access content',
    ]
  );
  user_role_grant_permissions(
    RoleInterface::AUTHENTICATED_ID,
    [
      'access content',
      'view own unpublished content',
      'use text format basic_html',
      'use text format simple_text',
      'view the administration theme',
    ]
  );
  user_role_grant_permissions(
    'contentmanager',
    [
      'access content overview',
      'access toolbar',
      'administer nodes',
      'administer menu',
      'access site reports',
      'access administration pages',
      'view all revisions',
      'revert all revisions',
      'delete all revisions',
      'create url aliases',
      'use text format full_html',
      'access social_core dashboard',
    ]
  );
  user_role_grant_permissions(
    'sitemanager',
    [
      'access content overview',
      'access toolbar',
      'administer nodes',
      'administer menu',
      'access site reports',
      'access administration pages',
      'view all revisions',
      'revert all revisions',
      'delete all revisions',
      'create url aliases',
      'use text format full_html',
      'administer taxonomy',
      'delete terms in expertise',
      'edit terms in expertise',
      'delete terms in interests',
      'edit terms in interests',
      'delete terms in topic_types',
      'edit terms in topic_types',
      'administer site configuration',
      'administer users',
      'administer account settings',
      'administer themes',
      'administer blocks',
      'administer block content',
      'access social_core dashboard',
    ]
  );
  // Create AN Homepage block.
  _social_core_create_an_homepage_block();
  // Add menu items.
  _social_core_create_menu_links();

  // Set image quality defaults.
  $config = \Drupal::service('config.factory')->getEditable('system.image.gd');
  $config->set('jpeg_quality', 90)->save();

  // If social blue is enabled, and default image is still Open Social.
  // Lets add the default e-mail logo for open social as well.
  _social_core_set_default_email_logo_for_socialblue();
  // Add favicon to GIN.
  _social_core_set_favicon();
}

/**
 * Custom function to create the homepage block for AN users.
 */
function _social_core_create_an_homepage_block() {
  // @todo use a better image from the theme.
  // Block image.
  $path = \Drupal::service('extension.list.module')->getPath('social_core');
  $image_path = $path . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'homepage-block.jpg';
  $uri = \Drupal::service('file_system')->copy($image_path, 'public://homepage-block.jpg', FileSystemInterface::EXISTS_REPLACE);

  $media = File::create([
    'langcode' => 'en',
    'uid' => 1,
    'status' => 1,
    'uri' => $uri,
  ]);
  $media->save();

  $fid = $media->id();

  // Apply image cropping.
  $data = [
    'x' => 0,
    'y' => 0,
    'width' => 1200,
    'height' => 490,
  ];
  $crop_type = \Drupal::entityTypeManager()
    ->getStorage('crop_type')
    ->load('hero_an');
  if (!empty($crop_type) && $crop_type instanceof CropType) {
    $image_widget_crop_manager = \Drupal::service('image_widget_crop.manager');
    $image_widget_crop_manager->applyCrop($data, [
      'file-uri' => $uri,
      'file-id' => $fid,
    ], $crop_type);
  }

  // Create a block with a specific uuid so we can use it in the config
  // to load it into the theme see block.block.anhomepageheroblock.yml.
  $block = \Drupal::entityTypeManager()->getStorage('block_content')->create([
    'type' => 'hero_call_to_action_block',
    'info' => 'AN homepage hero block',
    'uuid' => '8bb9d4bb-f182-4afc-b138-8a4b802824e4',
  ]);
  $block->field_text_block = [
    'value' => '<h3>Become a member or log in to your community</h3><p>This community is powered by Open Social, the plug-and-play community solution for NGOs and semi-governmental organizations.</p>',
    'format' => 'full_html',
  ];

  $block_image = [
    'target_id' => $fid,
    'alt' => "Anonymous front page image homepage'",
  ];
  $block->field_hero_image = $block_image;

  // Set the links.
  $action_links = [
    [
      'uri' => 'internal:/user/register',
      'title' => t('Sign up'),
    ],
    [
      'uri' => 'internal:/user/login',
      'title' => t('Login'),
    ],
  ];
  $itemList = new FieldItemList($block->field_call_to_action_link->getFieldDefinition());
  $itemList->setValue($action_links);
  $block->field_call_to_action_link = $itemList;
  $block->save();
}

/**
 * Function to create some menu items.
 */
function _social_core_create_menu_links() {
  // Home.
  MenuLinkContent::create([
    'title' => t('Home'),
    'link' => ['uri' => 'internal:/'],
    'menu_name' => 'main',
    'expanded' => FALSE,
    'weight' => 10,
  ])->save();

  // Explore.
  MenuLinkContent::create([
    'title' => t('Explore'),
    // This way we get an empty link.
    'link' => ['uri' => 'internal:'],
    'menu_name' => 'main',
    'expanded' => TRUE,
    'weight' => 20,
  ])->save();

}

/**
 * Implements hook_update_last_removed().
 */
function social_core_update_last_removed() : int {
  return 111206;
}

/**
 * Install social emoji module.
 */
function social_core_update_121001(): void {
  $modules = [
    'social_emoji',
  ];
  \Drupal::service('module_installer')->install($modules);
}

/**
 * Add permission for SM to edit block content.
 */
function social_core_update_121002(): void {
  // This was added in a Drupal Core release as new permission.
  // Considering we already assign administer blocks, this seems like a good
  // first iteration.
  user_role_grant_permissions('sitemanager', ['administer block content']);
}

/**
 * Create views.view.posts (module social_post).
 */
function social_core_update_122001(): void {
  // Only create if the posts view doesn't exist and views is enabled.
  if (\Drupal::moduleHandler()->moduleExists('views') && !View::load('posts')) {
    $config_path = Drupal::service('extension.list.module')->getPath('social_post') . '/config/install';
    $source = new FileStorage($config_path);
    $data = $source->read('views.view.posts');

    if (is_array($data)) {
      \Drupal::entityTypeManager()->getStorage('view')->create($data)->save();
    }
  }
}

/**
 * Uninstall admin_toolbar_tools if nothing uses it.
 */
function social_core_update_123001() : void {
  // Nothing to do if the module is not installed.
  if (!\Drupal::moduleHandler()->moduleExists('admin_toolbar_tools')) {
    return;
  }

  // If there are modules depending on admin_toolbar_tools, and it is enabled
  // we can't uninstall it.
  $module_dependencies = \Drupal::service('extension.list.module')->get('admin_toolbar_tools')->required_by ?? [];
  $has_dependency_enabled = FALSE;
  foreach ($module_dependencies as $module_name => $module_dependency) {
    if (\Drupal::moduleHandler()->moduleExists($module_name)) {
      $has_dependency_enabled = TRUE;
      break;
    }
  }
  if ($has_dependency_enabled) {
    return;
  }

  // Uninstall the module (nothing should depend on it but let the module
  // uninstaller double-check just in case).
  \Drupal::service('module_installer')->uninstall(['admin_toolbar_tools'], FALSE);
}
