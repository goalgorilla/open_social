<?php

/**
 * @file
 * The Social core module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Url;
use Drupal\filter\Entity\FilterFormat;
use Drupal\user\Entity\User;

/**
 * Implements hook_theme().
 */
function social_core_theme() {
  return array(
    'page_hero_data' => array(
      'variables' => array(
        'title' => NULL,
        'hero_node' => NULL,
        'node' => NULL,
        'node_type' => NULL,
        'section_class' => NULL,
        'event_enrollment' => NULL,
        'hero_styled_image_url' => NULL,
      ),
    ),
  );
}

/**
 * Prepares variables for the social page hero data.
 *
 * Default template: page-hero-data.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - title: Page title as a string
 *   - author_name: Author as a string
 *   - created_date: Timestamp
 *   - created_date_formatted: Formatted date as a string
 *   - topic_type: List of topic types as an array or NULL
 *   - hero_node: Rendered hero display of the current active node or NULL.
 */
function template_preprocess_page_hero_data(array &$variables) {
  // Get current user.
  $account = \Drupal::currentUser();

  // Get current node object or node id.
  $node = \Drupal::routeMatch()->getParameter('node');

  if (!is_object($node) && !is_null($node)) {
    $node = \Drupal::service('entity_type.manager')
      ->getStorage('node')
      ->load($node);
  }

  if (is_object($node)) {
    if (empty($variables['event_enrollment'])) {
      if ($node->getType() == 'event') {
        $form = \Drupal::formBuilder()
          ->getForm('Drupal\social_event\Form\EnrollActionForm');

        $render_array = array(
          'enroll_action_form' => $form,
        );

        $variables['event_enrollment'] = $render_array;
      }
    }

    // Add node edit url for management.
    if ($node instanceof Node) {
      // Get the current route name to check if the user is on the
      // edit or delete page.
      $route = \Drupal::routeMatch()->getRouteName();
      if (!in_array($route, array('entity.node.edit_form', 'entity.node.delete_form'))) {
        if ($node->access('update', $account)) {
          $variables['node_edit_url'] = $node->toUrl('edit-form')->toString();
        }
      }
    }

    // Add the hero styled image.
    $image_field = "field_{$node->getType()}_image";
    if (!empty($node->{$image_field}->entity)) {
      $variables['hero_styled_image_url'] = ImageStyle::load('social_xx_large')
        ->buildUrl($node->{$image_field}->entity->getFileUri());
    }

  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For Site information Site details form.
 */
function social_core_form_system_site_information_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide site slogan field and make it disabled as well whenever the user
  // is able to fill out the textfield.
  if (!empty($form['site_information']['site_slogan'])) {
    $form['site_information']['site_slogan']['#type'] = 'hidden';
    $form['site_information']['site_slogan']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_node_links_alter().
 */
function social_core_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
  // Remove the comment links.
  unset($links['comment__field_topic_comments']);
  unset($links['comment__field_event_comments']);

  if (isset($context['view_mode']) && in_array($context['view_mode'], ['activity', 'activity_comment'])) {
    // Add a readmore link.
    $node_title_stripped = strip_tags($entity->label());
    $links['node']['#links']['node-readmore'] = array(
      'title' => t('Read more<span class="visually-hidden"> about @title</span>', array(
        '@title' => $node_title_stripped,
      )),
      'url' => $entity->urlInfo(),
      'language' => $entity->language(),
      'attributes' => array(
        'rel' => 'tag',
        'title' => $node_title_stripped,
      ),
    );
  }
}

/**
 * Prepares variables for comment field templates.
 *
 * Default template: field--comment.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing render arrays for the list of
 *     comments, and the comment form. Array keys: comments, comment_form.
 */
function social_core_preprocess_field(array &$variables) {
  $element = $variables['element'];
  if ($element['#formatter'] == 'comment_node') {
    // Create separate variables for the more_link.
    $variables['more_link'] = $element[0]['more_link'];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function social_core_preprocess_block(&$variables) {
  /** @var \Drupal\user\Entity\User $account */
  $account = \Drupal::routeMatch()->getParameter('user');
  /** @var \Drupal\group\Entity\Group $group */
  $group = \Drupal::routeMatch()->getParameter('group');

  if (!empty($variables['elements']['content']['#view'])) {
    $view = $variables['elements']['content']['#view'];
    if (!empty($view->getDisplay())) {
      $link = $view->getDisplay();
      if (!empty($link->useMoreText())) {
        $more_link = $link->useMoreText();
      }
    }
  }

  // Add variables to sidebar blocks.
  switch ($variables['elements']['#derivative_plugin_id']) {
    case 'upcoming_events-block_my_upcoming_events':
      $variables['view_all_path'] = 'my-events';
      $variables['button_text'] = t('All @label', array('@label' => $variables['label']['#markup']));
      break;

    case 'upcoming_events-block_community_events':
      $variables['subtitle'] = t('in the community');
      $variables['view_all_path'] = 'community-events';
      $variables['button_text'] = t('All @label', array('@label' => $variables['label']['#markup']));
      break;

    case 'latest_topics-block_latest_topics':
      $variables['subtitle'] = t('in the community');
      $variables['view_all_path'] = 'all-topics';
      $variables['button_text'] = $more_link;
      $link->setOption('use_more', FALSE);
      break;

    case 'newest_groups-block_newest_groups':
      $variables['subtitle'] = t('in the community');
      $variables['view_all_path'] = 'all-groups';
      $variables['button_text'] = $more_link;
      $link->setOption('use_more', FALSE);
      break;

    case 'newest_users-block_newest_users':
      $variables['subtitle'] = t('in the community');
      $variables['view_all_path'] = 'all-members';
      $variables['button_text'] = $more_link;
      $link->setOption('use_more', FALSE);
      break;

    case 'events-block_events_on_profile':
      if ($account instanceof User) {
        $variables['subtitle'] = t('for this user');
        $variables['view_all_path'] = Url::fromRoute('view.events.events_overview', array('user' => $account->id()));
        $variables['button_text'] = t('All @label', array('@label' => $variables['label']['#markup']));
      }
      break;

    case 'topics-block_user_topics':
      if ($account instanceof User) {
        $variables['subtitle'] = t('for this user');
        $variables['view_all_path'] = Url::fromRoute('view.topics.page_profile', array('user' => $account->id()));
        $variables['button_text'] = $more_link;
        $link->setOption('use_more', FALSE);
      }
      break;

    case 'groups-block_user_groups':
      if ($account instanceof User) {
        $variables['subtitle'] = t('for this user');
        $variables['view_all_path'] = Url::fromRoute('view.groups.page_user_groups', array('user' => $account->id()));
        $variables['button_text'] = $more_link;
        $link->setOption('use_more', FALSE);
      }
      break;

    case 'group_members-block_newest_members':
      $variables['subtitle'] = t('in the group');
      $variables['view_all_path'] = Url::fromUserInput('/group/' . $group->id() . '/members');
      $variables['button_text'] = $more_link;
      $link->setOption('use_more', FALSE);
      break;

    case 'upcoming_events-upcoming_events_group':
      $variables['subtitle'] = t('in the group');
      $variables['view_all_path'] = Url::fromUserInput('/group/' . $group->id() . '/events');
      $variables['button_text'] = t('All @label', array('@label' => $variables['label']['#markup']));
      break;

    case 'latest_topics-group_topics_block':
      $variables['subtitle'] = t('in the group');
      $variables['view_all_path'] = Url::fromUserInput('/group/' . $group->id() . '/topics');
      $variables['button_text'] = $more_link;
      $link->setOption('use_more', FALSE);
      break;

  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function social_core_menu_local_tasks_alter(&$data, $route_name) {

  if (\Drupal::currentUser()->isAnonymous()) {
    // Anonymous user so we unset the user tabs on login register etc.
    if (isset($data['tabs'][0]['user.register'])) {
      unset($data['tabs'][0]['user.register']);
    }
    if (isset($data['tabs'][0]['user.pass'])) {
      unset($data['tabs'][0]['user.pass']);
    }
    if (isset($data['tabs'][0]['user.login'])) {
      unset($data['tabs'][0]['user.login']);
    }
  }

  $node = \Drupal::service('current_route_match')->getParameter('node');

  if (!is_null($node) && !is_object($node)) {
    $node = Node::load($node);
  }

  // Check for all active node types.
  if ($node instanceof Node && array_key_exists($node->getType(), NodeType::loadMultiple())) {
    // Remove Edit tab. Edit will always go through Floating Edit Button.
    if (isset($data['tabs'][0]['entity.node.edit_form'])) {
      unset($data['tabs'][0]['entity.node.edit_form']);
    }
  }
  // Change the default 'View' tab title.
  if (isset($data['tabs'][0]['entity.node.canonical']['#link'])) {
    $data['tabs'][0]['entity.node.canonical']['#link']['title'] = t('Details');
  }

  // Remove Delete tab. Delete will always go through Edit.
  if (isset($data['tabs'][0]['entity.node.delete_form'])) {
    unset($data['tabs'][0]['entity.node.delete_form']);
  }

}

/**
 * Implements hook_form_taxonomy_vocabulary_form_alter().
 */
function social_core_form_taxonomy_vocabulary_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Fetch current user.
  $account = \Drupal::currentUser();

  // Check if the current use is the admin.
  if (!in_array('administrator', $account->getRoles())) {
    // Remove the option to delete.
    unset($form['actions']['delete']);
  }
}

/**
 * Implements hook_form_taxonomy_vocabulary_confirm_delete_alter().
 */
function social_core_form_taxonomy_vocabulary_confirm_delete_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Fetch current user.
  $account = \Drupal::currentUser();

  // Check if the current use is the admin.
  if (!in_array('administrator', $account->getRoles())) {
    // Remove the option to delete.
    unset($form['actions']['submit']);
    $form['description']['#markup'] = t('You have insufficient permissions to delete this vocabulary');
  }
}

/**
 * Implements hook_form_alter().
 */
function social_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $formfield = array(
    'node_topic_edit_form' => 'field_topic_image',
    'node_topic_event_form' => 'field_event_image',
    'profile_profile_edit_form' => 'field_profile_image',
    'node_topic_form' => 'field_topic_image',
    'node_event_form' => 'field_event_image',
    'block_content_hero_call_to_action_block_edit_form' => 'field_hero_image',
  );

  if (array_key_exists($form_id, $formfield)) {
    $fieldname = $formfield[$form_id];
    $form[$fieldname]['widget'][0]['#description'] = t('Crop your image to select which part of your image to show on display.');
  }
}

/**
 * Implements hook_preprocess().
 */
function social_core_preprocess_breadcrumb(&$variables) {
  // Get the user.
  $user = \Drupal::currentUser();
  // Add cache tag for the user.
  $variables['#cache']['tags'][] = 'user:breadcrumb:' . $user->id();
}

/**
 * Implements hook_element_info_alter().
 */
function social_core_element_info_alter(array &$info) {
  if (isset($info['text_format']['#process'])) {
    $info['text_format']['#process'][] = 'social_core_filter_process_format';
  }
}

/**
 * Remove ability of selecting format if full_html is available.
 *
 * @todo Instead of defining the list of fields it would be better to add a separate
 * Setting to all text_format fields,
 * allowing to select whether to show format selector or not.
 */
function social_core_filter_process_format($element) {

  // Only fields listed here will have text format settings disabled.
  $full_html_field_ids = [
    'edit-body-0',
    'edit-field-profile-self-introduction-0',
    'edit-field-group-description-0',
  ];

  $full_html = FilterFormat::load('full_html');
  $permission_name = $full_html->getPermissionName();
  $account = \Drupal::currentUser();
  if ($element['#type'] == 'text_format' && $element['#format'] == 'full_html' && !$account->hasPermission($permission_name)) {
    $element['#format'] = 'basic_html';
    $element['value']['#format'] = 'basic_html';
    $element['format']['format']['#default_value'] = 'basic_html';
    $element['format']['format']['#value'] = 'basic_html';
    $element['value']['#disabled'] = FALSE;
    $element['format']['format']['#access'] = FALSE;
    $element['format']['#access'] = TRUE;
    $key = array_search('filter_form_access_denied', $element['value']['#pre_render']);

    if (isset($element['value']['#pre_render'][$key])) {
      unset($element['value']['#pre_render'][$key]);
    }
  }
  elseif ($element['#type'] == 'text_format' && $account->hasPermission($permission_name) && in_array($element['#id'], $full_html_field_ids)) {
    $element['#format'] = 'full_html';
    $element['format']['format']['#access'] = FALSE;
    $element['format']['format']['#value'] = 'full_html';
    $element['format']['help']['#access'] = FALSE;
    $element['format']['format']['#options'] = ['full_html' => 'Full HTML'];
  }

  return $element;
}
