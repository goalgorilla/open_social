<?php

/**
 * @file
 * Install, update and uninstall functions for the social_content_block module.
 */

/**
 * Implements hook_modules_installed().
 */
function social_content_block_modules_installed() {
  // When the set of installed modules change, reload the sorting optios.
  _social_content_block_update_sorting_options();
}

/**
 * Update the allowed values in the sorting options field based on plugins.
 */
function _social_content_block_update_sorting_options() {
  /** @var \Drupal\social_content_block\ContentBlockManagerInterface $content_block_manager */
  $content_block_manager = \Drupal::service('plugin.manager.content_block');

  // Retrieve all sort options, removing duplicates and format them to the
  // format of field storage configuration.
  $sort_options = [];

  foreach (array_keys($content_block_manager->getDefinitions()) as $plugin_id) {
    $plugin = $content_block_manager->createInstance($plugin_id);

    foreach ($plugin->supportedSortOptions() as $name => $settings) {
      $sort_options[] = [
        'value' => $name,
        'label' => is_array($settings) ? $settings['label'] : $settings,
      ];
    }
  }

  // Load the existing configuration and update it if it's different.
  $config_name = 'field.storage.block_content.field_sorting';
  $config = \Drupal::configFactory()->getEditable($config_name);
  $config_data = $config->getRawData();

  if ($sort_options !== $config_data['settings']['allowed_values']) {
    $config_data['settings']['allowed_values'] = $sort_options;
    $config->setData($config_data)->save();
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  }
}

/**
 * Implements hook_update_last_removed().
 */
function social_content_block_update_last_removed() : int {
  return 11801;
}
