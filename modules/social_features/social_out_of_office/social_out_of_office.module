<?php

/**
 * @file
 * Contains social_out_of_office.module.
 */

use Drupal\comment\CommentInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\profile\Entity\ProfileInterface;
use Drupal\social_out_of_office\SocialOutOfOfficeHelperInterface;
use Drupal\social_post\Entity\PostInterface;
use Drupal\user\UserInterface;

/**
 * @file
 * The Social Out of office module.
 */

/**
 * Implements hook_preprocess_HOOK().
 */
function social_out_of_office_preprocess_profile(array &$variables): void {
  if ($variables['elements']['#view_mode'] === 'statistic') {
    /** @var \Drupal\profile\Entity\Profile $profile */
    $profile = $variables['profile'];

    /** @var \Drupal\social_out_of_office\SocialOutOfOfficeHelperInterface $ooo_helper */
    $ooo_helper = \Drupal::service('social_out_of_office.helper');

    // Check if user is out of office.
    if ($ooo_helper->isUserOutOfOffice($profile)) {
      // Set status message.
      $variables['profile_ooo_status'] = t('Currently out of office');

      // Retrieve, prepare and set a message from user profile.
      $message = $profile->get('field_profile_message_ooo')->getValue();
      $variables['profile_message_ooo'] = ['#markup' => $message[0]['value'] ?? ''];

      // If there is an alternative person we should show them out.
      if (!$profile->get('field_profile_alt_contact')->isEmpty()) {
        // Retrieve and show an alternative person, if filled.
        $alt_contact_person_user = $profile->get('field_profile_alt_contact')->referencedEntities()[0];

        /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
        $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

        /** @var \Drupal\profile\Entity\ProfileInterface $profile */
        $alt_contact_person = $profile_storage->loadByUser($alt_contact_person_user, SocialOutOfOfficeHelperInterface::PROFILE_TYPE);

        if ($alt_contact_person instanceof ProfileInterface) {
          /** @var \Drupal\social_profile\SocialProfileNameService $profile_name_service */
          $profile_name_service = \Drupal::service('social_profile.name_service');

          // Get generated profile name.
          $alt_contact_person_name = $profile_name_service->getProfileName($alt_contact_person);
          // Prepare contact person URL.
          $alt_contact_person_url = Url::fromRoute('social_user.stream', ['user' => $alt_contact_person->id()]);

          // Add extra variables with necessary data.
          $variables['profile_alt_contact_person_name'] = $alt_contact_person_name;
          $variables['profile_alt_contact_person_url'] = $alt_contact_person_url;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_user().
 */
function social_out_of_office_preprocess_user(array &$variables): void {
  // Show status in private messaging thread if someone is out of office.
  if ($variables['elements']['#view_mode'] === 'private_message_author') {
    $current_user = \Drupal::currentUser()->getAccount();
    $user = $variables['elements']['#user'];

    if ($current_user->id() !== $user->id()) {
      /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
      $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

      /** @var \Drupal\profile\Entity\Profile $profile */
      $profile = $profile_storage->loadByUser($user, SocialOutOfOfficeHelperInterface::PROFILE_TYPE);

      if ($profile instanceof ProfileInterface) {
        /** @var \Drupal\social_out_of_office\SocialOutOfOfficeHelperInterface $ooo_helper */
        $ooo_helper = \Drupal::service('social_out_of_office.helper');

        // Check if user is out of office.
        if ($ooo_helper->isUserOutOfOffice($profile)) {
          // Retrieve out of office dates.
          $dates = $ooo_helper->getOutOfOfficeDates($profile);

          $suffix = t('<span> is out of office from @start_date to @end_date </span>', [
            '@start_date' => $dates['start'],
            '@end_date' => $dates['end'],
          ]);
          $suffix .= $variables['content']['linked_username']['#suffix'];
          $variables['content']['linked_username']['#suffix'] = $suffix;
        }
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function social_out_of_office_entity_presave(EntityInterface $entity): void {
  // Show message about users that out of office if someone mentioned them in
  // post or comment.
  if (
    !($entity instanceof PostInterface) &&
    !($entity instanceof CommentInterface)
  ) {
    return;
  }
  $entity_type_manager = \Drupal::entityTypeManager();

  $post_comment_related_profiles = [];

  /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
  $profile_storage = $entity_type_manager->getStorage('profile');

  // Comment entity type.
  if ($entity instanceof CommentInterface) {
    $body_value = $entity->get('field_comment_body')->getValue();

    // If commented entity author is OoO we should show message about that.
    /** @var \Drupal\social_post\Entity\PostInterface $commented_entity */
    /** @var \Drupal\node\NodeInterface $commented_entity */
    $commented_entity = $entity->getCommentedEntity();
    if ($commented_entity !== NULL) {
      $author_id = $commented_entity->getOwnerId();
      $author = $entity_type_manager->getStorage('user')->load($author_id);

      if (!($author instanceof UserInterface)) {
        return;
      }

      /** @var \Drupal\profile\Entity\Profile $profile */
      $profile = $profile_storage->loadByUser($author, SocialOutOfOfficeHelperInterface::PROFILE_TYPE);
      $post_comment_related_profiles[] = $profile;
    }

    // If parent comment author is OoO we should show message about that.
    $parent_comment = $entity->getParentComment();
    if ($parent_comment) {
      $parent_comment_author = $parent_comment->getOwner();
      /** @var \Drupal\profile\Entity\Profile $profile */
      $profile = $profile_storage->loadByUser($parent_comment_author, SocialOutOfOfficeHelperInterface::PROFILE_TYPE);
      $post_comment_related_profiles[] = $profile;
    }
  }
  // Post entity type.
  else {
    $body_value = $entity->get('field_post')->getValue();
  }

  /** @var \Drupal\social_out_of_office\SocialOutOfOfficeHelperInterface $ooo_helper */
  $ooo_helper = \Drupal::service('social_out_of_office.helper');

  /** @var \Drupal\social_mentions\SocialMentionsHelperInterface $social_mentions_helper */
  $social_mentions_helper = \Drupal::service('social_mentions.helper');

  // Prepare body value.
  $body_value = $body_value[0]['value'] ?? '';

  // Retrieve mentions from body.
  $mentions = $social_mentions_helper->getMentions($body_value);

  // Go through all mentions.
  if (!empty($mentions)) {
    foreach ($mentions as $id) {
      /** @var \Drupal\profile\Entity\Profile $profile */
      $profile = $profile_storage->load($id);

      if (!($profile instanceof ProfileInterface)) {
        continue;
      }

      // Remove mention profile if it is in related profiles array.
      if (($index = array_search($profile, $post_comment_related_profiles)) !== FALSE) {
        unset($post_comment_related_profiles[$index]);
      }

      // Show out of office message that contains in user profile.
      $ooo_helper->showOutOfOfficeStatusMessage($profile);
    }
  }

  // Show OoO messages for related profiles.
  foreach ($post_comment_related_profiles as $post_comment_related_profile) {
    // Show out of office message that contains in user profile.
    $ooo_helper->showOutOfOfficeStatusMessage($post_comment_related_profile);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_out_of_office_form_private_message_add_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Make sure that we add custom submit handler exactly for create new chat
  // with user since we already add message about out of office for existing
  // chats.
  // @see social_out_of_office_preprocess_user()
  if (\Drupal::routeMatch()->getRouteName() === 'private_message.private_message_create') {
    $form['actions']['submit']['#submit'][] = 'social_out_of_office_add_notice_about_users_ooo';
  }
}

/**
 * Submit function for 'form_private_message_add' form.
 */
function social_out_of_office_add_notice_about_users_ooo(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\social_out_of_office\SocialOutOfOfficeHelperInterface $ooo_helper */
  $ooo_helper = \Drupal::service('social_out_of_office.helper');

  // Check if any of members is out of office and add status message if yes.
  $members = $form_state->getValue('members');
  foreach ($members as $member) {
    foreach ($member as $member_id) {
      /** @var \Drupal\user\Entity\User $user */
      $user = \Drupal::entityTypeManager()->getStorage('user')->load($member_id);

      if (!($user instanceof UserInterface)) {
        return;
      }

      /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
      $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

      /** @var \Drupal\profile\Entity\Profile $profile */
      $profile = $profile_storage->loadByUser($user, SocialOutOfOfficeHelperInterface::PROFILE_TYPE);

      // Show out of office message that contains in user profile.
      $ooo_helper->showOutOfOfficeStatusMessage($profile);
    }
  }
}

/**
 * Implements hook_FORM_ID_form_alter().
 */
function social_out_of_office_form_profile_profile_edit_form_alter(array &$form): void {
  // Add Out of office message description.
  $form['field_profile_message_ooo']['widget'][0]['#description'] = t('Max number of characters for Message is @max_length', [
    '@max_length' => SocialOutOfOfficeHelperInterface::MESSAGE_MAX_LENGTH,
  ]);
  // Add Out of office message validation.
  $form['#validate'][] = 'social_out_of_office_max_length_of_message_validate';
  // Attach custom library.
  $form['#attached']['library'][] = 'social_out_of_office/admin';
}

/**
 * Validator for Message field.
 */
function social_out_of_office_max_length_of_message_validate(array &$form, FormStateInterface $form_state): void {
  // Show error if message has more characters than 240.
  $message = $form_state->getValue('field_profile_message_ooo');
  $message = strip_tags($message[0]['value'] ?? '');
  if (strlen($message) > SocialOutOfOfficeHelperInterface::MESSAGE_MAX_LENGTH) {
    $form_state->setErrorByName('field_profile_message_ooo', t('The maximum length of for Message field is @max_length.', [
      '@max_length' => SocialOutOfOfficeHelperInterface::MESSAGE_MAX_LENGTH,
    ]));
  }
}
