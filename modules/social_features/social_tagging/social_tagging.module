<?php

/**
 * @file
 * Contains social_tagging.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\Item\Field;
use Drupal\select2\Element\Select2;
use Drupal\taxonomy\TermInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function social_tagging_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the social_tagging module.
    case 'help.page.social_tagging':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Content tagging module') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_preprocess().
 */
function social_tagging_preprocess(array &$variables, string $hook) : void {
  // We only care about the `social_tagging` view mode.
  if (!isset($variables['elements']['#view_mode']) || $variables['elements']['#view_mode'] !== 'social_tagging') {
    return;
  }

  // If this template renders pages differently we want to show it as a page to
  // remove things like author information.
  if (isset($variables['page'])) {
    $variables['page'] = TRUE;
  }

  // If the content type is configured to display the author information we hide
  // that. This is not currently possible in display settings, unfortunately.
  if (isset($variables['display_submitted'])) {
    $variables['display_submitted'] = FALSE;
  }
}

/**
 * Manage the aggregated tagging field in our search index.
 *
 * Will ensure that for the entity types we support (node, group, profile) the
 * aggregated field is updated. This is done in a way that only fields are added
 * if they're newly enabled. This allows other modules to add fields for their
 * own entity types.
 */
function _social_tagging_update_search_index_for_tagging(): void {
  $index = Index::load("social_all");
  assert($index !== NULL, "Missing 'social_all' index which points to a corrupt Open Social installation.");

  $field = $index->getField("social_tagging");
  // If the field doesn't exist yet, we create a new one with the default
  // configuration.
  if ($field === NULL) {
    $field = new Field($index, "social_tagging");
    $field
      ->setLabel("Tagging")
      ->setPropertyPath("aggregated_field")
      ->setType("string")
      ->setConfiguration([
        "type" => "union",
        "fields" => [],
      ]);
    $index->addField($field);
  }
  $configuration = $field->getConfiguration();

  // The optional modules which indicate the entity types are enabled in
  // Open Social.
  // Developer note: we chose not to implement an alter hook on purpose,
  // instead it's recommended to update the index config directly. The below
  // code takes care not to remove any added fields.
  if (\Drupal::moduleHandler()->moduleExists("social_node")) {
    $configuration['fields'][] = "entity:node/field_social_tagging";
  }
  if (\Drupal::moduleHandler()->moduleExists("social_group")) {
    $configuration['fields'][] = "entity:group/field_social_tagging";
  }
  if (\Drupal::moduleHandler()->moduleExists("social_profile")) {
    $configuration['fields'][] = "entity:profile/field_social_tagging";
  }

  // Deduplicate anything we may have added twice.
  $configuration['fields'] = array_unique($configuration['fields']);
  $field->setConfiguration($configuration);

  // If the aggregated field is empty we remove it.
  $is_empty = empty($configuration['fields']);
  if ($is_empty) {
    $index->removeField("social_tagging");
  }
  else {
    // Ensure the aggregated field processor is there to actually fill our field.
    if (!$index->isValidProcessor("aggregated_field")) {
      $index->addProcessor(
        \Drupal::getContainer()
          ->get('search_api.plugin_helper')
          ->createProcessorPlugin($index, "aggregated_field")
      );
    }

    // The aggregated field must be treated as a hierarchy to ensure we can
    // properly create our facet filter on it.
    if ($index->isValidProcessor("hierarchy")) {
      $hierarchy_processor = $index->getProcessor("hierarchy");
    }
    else {
      $hierarchy_processor = \Drupal::getContainer()
        ->get('search_api.plugin_helper')
        ->createProcessorPlugin($index, "hierarchy");
      $index->addProcessor($hierarchy_processor);
    }
    $hierarchy_configuration = $hierarchy_processor->getConfiguration();
    if (!isset($hierarchy_configuration['fields']['social_tagging'])) {
      $hierarchy_configuration['fields']['social_tagging'] = "taxonomy_term-parent";
      $hierarchy_processor->setConfiguration($hierarchy_configuration);
    }
  }

  $index->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_tagging_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_ids = [
    'views-exposed-form-search-content-page-no-value',
    'views-exposed-form-search-content-page',
    'views-exposed-form-search-groups-page-no-value',
    'views-exposed-form-search-groups-page',
    'views-exposed-form-search-users-page-no-value',
    'views-exposed-form-search-users-page',
    'views-exposed-form-latest-topics-page-latest-topics',
    'views-exposed-form-upcoming-events-page-community-events',
    'views-exposed-form-topics-page-profile',
    'views-exposed-form-events-events-overview',
    'views-exposed-form-group-topics-page-group-topics',
    'views-exposed-form-group-events-page-group-events',
    'views-exposed-form-group-books-page-group-books',
    'views-exposed-form-newest-groups-page-all-groups',
    'views-exposed-form-newest-users-page-newest-users',
  ];

  // Must be either one of these form_ids.
  if (!in_array($form['#id'], $form_ids)) {
    return;
  }

  if (!\Drupal::configFactory()->get('social_tagging.settings')->get('enable_content_tagging')) {
    return;
  }


  /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */
  $term_storage = \Drupal::service("entity_type.manager")->getStorage("taxonomy_term");
  $categories = $term_storage->loadByProperties(["vid" => "social_tagging", "parent" => 0]);

  foreach ($categories as $tid => $term) {
    $term_label = $term->label();
    assert($term_label !== NULL, "Taxonomy terms should have a required label field.");
    $label = \Drupal::service('social_core.machine_name')->transform((string) $term_label);

    if (isset($form[$label])) {
      $form[$label]['#options'] = [];
      $form[$label]['#options'][''] = t('- Unspecified -');

      // Always allow selecting the parent to require having something filled
      // in.
      $form[$label]['#options'] += ['any' => '- Any -'];

      $form[$label]['#options'] = array_map(
        fn (TermInterface $child) => $child->label(),
        $term_storage->loadByProperties(["vid" => "social_tagging", "parent" => $tid])
      );
      $form[$label]['#type'] = 'select2';
      $form[$label]['#size'] = NULL;

      if (isset($form[$label]['#context']['#plugin_type']) && $form[$label]['#context']['#plugin_type'] === 'bef') {
        $form[$label]['#select2'] = [];
        $form[$label]['#process'] = [
          [Select2::class, 'processSelect'],
        ];
        $form[$label]['#pre_render'] = [
          [Select2::class, 'preRenderSelect'],
          [Select2::class, 'preRenderAutocomplete'],
          [Select2::class, 'preRenderOverwrites'],
        ];
      }

      /** @var \Symfony\Component\HttpFoundation\ParameterBag $query */
      $query = \Drupal::request()->query;
      if ($query->has($label)) {
        $form[$label]['#value'] = $query->get($label);
      }

    }
  }

}

/**
 * Main term names to machine name for on node edit / validate.
 *
 * @param string $text
 *   A node.
 *
 * @return mixed|string
 *   A machine name so it can be used programmatically.
 *
 * @deprecated in social:11.3.10 and is removed from social:12.0.0. Use
 *   \Drupal::service('social_core.machine_name')->transform() instead.
 *
 * @see https://www.drupal.org/node/3306214
 */
function social_tagging_to_machine_name($text) {
  @trigger_error('social_tagging_to_machine_name() is deprecated in social:11.3.10 and is removed from social:12.0.0. Use "\Drupal::service(\'social_core.machine_name\')->transform()" instead. See https://www.drupal.org/node/3306214', E_USER_DEPRECATED);
  return preg_replace('@[^a-z0-9-]+@', '_', strtolower($text));
}

/**
 * Implements hook_preprocess_views_query_alter().
 */
function social_tagging_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (!\Drupal::configFactory()->get('social_tagging.settings')->get('use_and_condition')) {
    return;
  }

  // View id and display id.
  $tagging_views = [
    'latest_topics' => 'page_latest_topics',
    'upcoming_events' => 'page_community_events',
    'events' => 'events_overview',
    'group_topics' => 'default',
    'group_events' => 'default',
    'group_books' => 'default',
    'newest_groups' => 'page_all_groups',
    'newest_users' => 'page',
  ];

  if (array_key_exists((string) $view->id(), $tagging_views) && in_array($view->getDisplay()->getBaseId(), $tagging_views, TRUE)) {
    /** @var \Drupal\views\Plugin\views\query\Sql $query */
    $org_query = $query->where['2'];
    $conditions = $org_query['conditions'] ?? [];
    $count_conditions = count($conditions);

    // This only make sense if there are multiple
    // search terms.
    if ($count_conditions <= 1) {
      return;
    }

    // Extract the term ids.
    $values = [];
    foreach ($conditions as $condition) {
      $values[] = $condition['value'];
    }

    // Update the condition and use IN instead
    // of =.
    $new_condition = end($conditions);
    $new_condition['value'] = $values;
    $new_condition['operator'] = 'IN';
    $field = $new_condition['field'];

    // Make sure we only get results that has all the
    // required terms.
    $query->addHavingExpression(
      0,
      "COUNT(DISTINCT($field)) = $count_conditions",
      [],
    );
  }

  /** @var \Drupal\search_api\Plugin\views\query\SearchApiQuery $query */
  if ($view->id() === 'search_content' && isset($query->getWhere()[2]['type'])) {
    $query->getWhere()[2]['type'] = 'AND';
  }
}

/**
 * Implements hook_modules_installed().
 */
function social_tagging_modules_installed(array $modules, bool $is_syncing): void {
  // If we're syncing configuration then we assume this hook has already run
  // locally, so we don't want to modify any config.
  if (!$is_syncing) {
    // Ensure if any of our supported modules were enabled and the entity is now
    // present we update our aggregated field.
    _social_tagging_update_search_index_for_tagging();
  }

  // @todo Probably remove the below and replace with social_media -> field.media install.
  if (in_array('media', $modules)) {
    $entity_type = \Drupal::entityTypeManager()
      ->getStorage('media')
      ->getEntityType();

    $fields = \Drupal::moduleHandler()
      ->invokeAll('entity_base_field_info', [$entity_type]);

    if (!isset($fields['social_tagging'])) {
      return;
    }

    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition('social_tagging', 'media', 'social_tagging', $fields['social_tagging']);
  }
}
