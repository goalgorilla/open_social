<?php

/**
 * @file
 * Install hooks for Social Content Report.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\taxonomy\Entity\Term;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 */
function social_content_report_install() {
  // The terms to create with their weight.
  $terms = [
    'Abuse' => 0,
    'Spam' => 0,
    'Other' => 1,
  ];

  $default_values = [];

  // Create the above terms on module install.
  foreach ($terms as $name => $weight) {
    try {
      /** @var \Drupal\taxonomy\TermInterface $term */
      $term = Term::create([
        'name' => $name,
        'weight' => $weight,
        'vid' => 'report_reasons',
      ]);
      $term->save();

      // Just the "Other" term should have a reason text field by default.
      if ($weight) {
        $default_values[] = $term->id();
      }
    }
    catch (EntityStorageException $exception) {
      \Drupal::logger('social_content_report')
        ->error(t('The term "@term" could not be created.', ['@term' => $name]));
    }
  }

  // Store the default selected term(s) in the config.
  // The configuration is updated here because we can't know the IDs of the
  // terms before they are created. This means that a static configuration file
  // can't be used.
  \Drupal::configFactory()->getEditable('social_content_report.settings')
    ->set('reasons_with_text', $default_values)
    ->save();

  // Grant the default permissions for this feature.
  user_role_grant_permissions(
    'verified',
    [
      'flag report_comment',
      'flag report_node',
      'flag report_post',
    ]
  );
  user_role_grant_permissions(
    'contentmanager',
    [
      'flag report_comment',
      'flag report_node',
      'flag report_post',
      'view inappropriate reports',
      'close inappropriate reports',
    ]
  );
  user_role_grant_permissions(
    'sitemanager',
    [
      'flag report_comment',
      'flag report_node',
      'flag report_post',
      'view inappropriate reports',
      'close inappropriate reports',
      'administer social_content_report settings',
      'create terms in report_reasons',
      'delete terms in report_reasons',
      'edit terms in report_reasons',
    ]
  );
}

/**
 * Implements hook_update_last_removed().
 */
function social_content_report_update_last_removed(): int {
  return 11401;
}

/**
 * Grant permissions to manage report_reasons terms for sitemanager.
 */
function social_content_report_update_130001(): void {
  $permissions = [
    'create terms in report_reasons',
    'delete terms in report_reasons',
    'edit terms in report_reasons',
  ];
  user_role_grant_permissions('sitemanager', $permissions);
}

/**
 * Create entity-form-display or hidden path field from Report Reasons taxonomy.
 */
function social_content_report_update_130002(): void {
  $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
  $form_display = $storage->load('taxonomy_term.report_reasons.default');

  // When entity-form-display isn't be created,
  // It will be created from the install folder.
  if (empty($form_display)) {
    // Get file from install folder and check if it exists.
    $config_file = \Drupal::service('extension.list.module')->getPath('social_content_report') . '/config/install/core.entity_form_display.taxonomy_term.report_reasons.default.yml';
    if (file_exists($config_file) === FALSE) {
      \Drupal::logger('social_content_report')->error('Configuration file for entity-form-display "report_reasons" not found.');
      return;
    }

    // Apply the configuration to create entity-form-display.
    $view_config = Yaml::parseFile($config_file);
    \Drupal::configFactory()->getEditable('core.entity_form_display.taxonomy_term.report_reasons.default')
      ->setData($view_config)
      ->save();
  }
  else {
    // Get fields and check if path is already be hidden.
    $hidden = $form_display->get('hidden');
    $content = $form_display->get('content');
    if (in_array('path', array_keys($hidden))) {
      \Drupal::logger('social_content_report')->info('The path field already is hidden on Report Reasons taxonomy.');
      return;
    }

    // Manipulate path field to be hidden and save.
    $hidden['path'] = TRUE;
    unset($content['path']);
    $form_display->set('hidden', $hidden)
      ->set('content', $content)
      ->save();
  }
}

/**
 * Update Reports page views, adding filters and "remove" button.
 */
function social_content_report_update_130003(): string {
  // This is skipping the update helper because we need to add fields to the
  // exact place of the fields list. Unfortunately, this is only controlled by
  // the order in which the fields are added, not by the weight attribute. When
  // adding it via the update helper, the new field is appended to the bottom of
  // the fields list.
  $config = \Drupal::configFactory()->getEditable('views.view.report_overview');

  $fields = $config->get('display.default.display_options.fields');

  // Set new field in the beginning, so it can be used in the "dropdown" field.
  $new_field = [
    'delete_comment' => [
      'id' => 'delete_comment',
      'table' => 'comment',
      'field' => 'delete_comment',
      'relationship' => 'flag_report_comment',
      'group_type' => 'group',
      'admin_label' => '',
      'entity_type' => 'comment',
      'plugin_id' => 'entity_link_delete',
      'label' => 'Delete Comment',
      'exclude' => TRUE,
      'alter' => [
        'alter_text' => FALSE,
        'text' => '',
        'make_link' => FALSE,
        'path' => '',
        'absolute' => FALSE,
        'external' => FALSE,
        'replace_spaces' => FALSE,
        'path_case' => 'none',
        'trim_whitespace' => FALSE,
        'alt' => '',
        'rel' => '',
        'link_class' => '',
        'prefix' => '',
        'suffix' => '',
        'target' => '',
        'nl2br' => FALSE,
        'max_length' => 0,
        'word_boundary' => TRUE,
        'ellipsis' => TRUE,
        'more_link' => FALSE,
        'more_link_text' => '',
        'more_link_path' => '',
        'strip_tags' => FALSE,
        'trim' => FALSE,
        'preserve_tags' => '',
        'html' => FALSE,
      ],
      'element_type' => '',
      'element_class' => '',
      'element_label_type' => '',
      'element_label_class' => '',
      'element_label_colon' => FALSE,
      'element_wrapper_type' => '',
      'element_wrapper_class' => '',
      'element_default_classes' => TRUE,
      'empty' => '',
      'hide_empty' => FALSE,
      'empty_zero' => FALSE,
      'hide_alter_empty' => TRUE,
      'text' => 'Delete Comment',
      'output_url_as_text' => FALSE,
      'absolute' => FALSE,
    ],
    'delete_post' => [
      'id' => 'delete_post',
      'table' => 'post',
      'field' => 'delete_post',
      'relationship' => 'flag_report_post',
      'group_type' => 'group',
      'admin_label' => '',
      'entity_type' => 'post',
      'plugin_id' => 'entity_link_delete',
      'label' => '',
      'exclude' => TRUE,
      'alter' => [
        'alter_text' => FALSE,
        'text' => '',
        'make_link' => FALSE,
        'path' => '',
        'absolute' => FALSE,
        'external' => FALSE,
        'replace_spaces' => FALSE,
        'path_case' => 'none',
        'trim_whitespace' => FALSE,
        'alt' => '',
        'rel' => '',
        'link_class' => '',
        'prefix' => '',
        'suffix' => '',
        'target' => '',
        'nl2br' => FALSE,
        'max_length' => 0,
        'word_boundary' => TRUE,
        'ellipsis' => TRUE,
        'more_link' => FALSE,
        'more_link_text' => '',
        'more_link_path' => '',
        'strip_tags' => FALSE,
        'trim' => FALSE,
        'preserve_tags' => '',
        'html' => FALSE,
      ],
      'element_type' => '',
      'element_class' => '',
      'element_label_type' => '',
      'element_label_class' => '',
      'element_label_colon' => FALSE,
      'element_wrapper_type' => '',
      'element_wrapper_class' => '',
      'element_default_classes' => TRUE,
      'empty' => '',
      'hide_empty' => FALSE,
      'empty_zero' => FALSE,
      'hide_alter_empty' => TRUE,
      'text' => 'Delete Post',
      'output_url_as_text' => FALSE,
      'absolute' => FALSE,
    ],
    'delete_node' => [
      'id' => 'delete_node',
      'table' => 'node',
      'field' => 'delete_node',
      'relationship' => 'flag_report_node',
      'group_type' => 'group',
      'admin_label' => '',
      'entity_type' => 'node',
      'plugin_id' => 'entity_link_delete',
      'label' => '',
      'exclude' => TRUE,
      'alter' => [
        'alter_text' => FALSE,
        'text' => '',
        'make_link' => FALSE,
        'path' => '',
        'absolute' => FALSE,
        'external' => FALSE,
        'replace_spaces' => FALSE,
        'path_case' => 'none',
        'trim_whitespace' => FALSE,
        'alt' => '',
        'rel' => '',
        'link_class' => '',
        'prefix' => '',
        'suffix' => '',
        'target' => '',
        'nl2br' => FALSE,
        'max_length' => 0,
        'word_boundary' => TRUE,
        'ellipsis' => TRUE,
        'more_link' => FALSE,
        'more_link_text' => '',
        'more_link_path' => '',
        'strip_tags' => FALSE,
        'trim' => FALSE,
        'preserve_tags' => '',
        'html' => FALSE,
      ],
      'element_type' => '',
      'element_class' => '',
      'element_label_type' => '',
      'element_label_class' => '',
      'element_label_colon' => FALSE,
      'element_wrapper_type' => '',
      'element_wrapper_class' => '',
      'element_default_classes' => TRUE,
      'empty' => '',
      'hide_empty' => FALSE,
      'empty_zero' => FALSE,
      'hide_alter_empty' => TRUE,
      'text' => 'Delete Content',
      'output_url_as_text' => FALSE,
      'absolute' => FALSE,
    ],
  ];
  $fields = array_merge($new_field, $fields);

  // Update dropdown field.
  $fields['dropbutton']['destination'] = FALSE;
  $fields['dropbutton']['fields']['delete_comment'] = 'delete_comment';
  $fields['dropbutton']['fields']['delete_post'] = 'delete_post';
  $fields['dropbutton']['fields']['delete_node'] = 'delete_node';

  // Safe fields values.
  $config->set('display.default.display_options.fields', $fields);
  $config->save();

  // Run the rest of configuration as usually.
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('social_content_report', __FUNCTION__);

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}
