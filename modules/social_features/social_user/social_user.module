<?php

/**
 * @file
 * The social user module alterations.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\user\RegisterForm
 */
function social_user_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  // By default notify the user of the new account.
  if (isset($form['account']['notify']) && $form['account']['notify']['#access'] === TRUE) {
    $form['account']['notify']['#default_value'] = 1;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\user\AccountForm
 */
function social_user_form_user_form_alter(&$form, FormStateInterface $form_state) {
  // Add forcing of changing password, message to user
  // if they logged in via a one-time login link.
  if ($form_state->get('user_pass_reset')) {
    $form['#attached']['library'][] = 'social_user/user_form_protection';
  }
}

/**
 * Check if an users with the input field for name or mail field is blocked.
 *
 * @param string $name_or_mail
 *   Username or email address.
 *
 * @return bool
 *   TRUE if blocked FALSE if not blocked
 */
function social_user_is_blocked($name_or_mail) {
  $is_blocked_name = (bool) \Drupal::entityQuery('user')
    ->condition('name', $name_or_mail)
    ->condition('status', 0)
    ->execute();

  $is_blocked_mail = (bool) \Drupal::entityQuery('user')
    ->condition('mail', $name_or_mail)
    ->condition('status', 0)
    ->execute();

  if ($is_blocked_name || $is_blocked_mail) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function social_user_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  // Add the custom Social username constraint.
  if ($entity_type->id() == 'user' && isset($fields['name'])) {
    $fields['name']->addConstraint('SocialUserName');
  }
}

/**
 * Implements hook_form_alter().
 */
function social_user_form_user_cancel_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Fetch the current user.
  $account = \Drupal::currentUser();
  // Check if the user has permissions.
  if ($account->hasPermission('administer account settings') === FALSE) {
    // Remove the option to cancel account and delete all related content.
    unset($form['user_cancel_method']['#options']['user_cancel_delete']);
  }
}

/**
 * Implements hook_theme().
 */
function social_user_theme() {
  return array(
    'account_header_links' => array(
      'variables' => array(
        'links' => NULL,
      ),
    ),
  );
}

/**
 * Prepares variables for the account header links.
 *
 * Default template: account-header-links.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *    - links.
 */
function template_preprocess_account_header_links(&$variables) {
  // Add the search content block to account_header_links.
  $block = Block::load('search_content_block_header');
  if(!empty($block)){
    $block_output = \Drupal::entityManager()
      ->getViewBuilder('block')
      ->view($block);

    $variables['links']['search_block'] = $block_output;
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function social_user_block_view_search_content_block_alter(array &$build, BlockPluginInterface $block) {
  // Add pre render to search content block in the header.
  $build['#pre_render'][] = '_social_user_search_content_pre_render';
}

/**
 * Pre render for the search content in the header. This will add javascript.
 *
 * @param array $build
 *   The render build array.
 *
 * @return array
 *   Attached array with javascript.
 */
function _social_user_search_content_pre_render(array $build) {
  // Attach the social_search library defined in social_search.libraries.yml.
  $build['#attached'] = array(
    'library' => array(
      'social_search/navbar-search',
    ),
  );

  return $build;
}

/**
 * Implements hook_user_format_name_alter().
 */
function social_user_user_format_name_alter(&$name, $account) {

  $accountname = '';
  // Let's get the First name Last name.
  /** @var \Drupal\profile\ProfileStorageInterface $storage */
  $storage = \Drupal::entityTypeManager()->getStorage('profile');
  if (!empty($storage)) {
    // Returns false.
    if ($user_profile = $storage->loadByUser($account, 'profile', TRUE)) {
      $accountname = trim(t('@first @last', array(
        '@first' => $user_profile->get('field_profile_first_name')->value,
        '@last' => $user_profile->get('field_profile_last_name')->value
      )));
    }
  }
  $name = ($accountname !== '') ? $accountname : $name;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function social_user_menu_local_tasks_alter(&$data, $route_name) {
  // Change the default 'View' tab title.
  if (isset($data['tabs'][0]['entity.user.canonical']['#link'])) {
    $data['tabs'][0]['entity.user.canonical']['#link']['title'] = t('Stream');
  }

  // Remove Edit tab. Edit will always go through Floating Edit Button.
  if (isset($data['tabs'][0]['entity.user.edit_form'])) {
    unset($data['tabs'][0]['entity.user.edit_form']);
  }

  // Keep consistent sorting of 2nd navbar items.
  if (isset($data['tabs'][0]['social_user.events'])) {
    $data['tabs'][0]['social_user.events']['#weight'] = -2;
  }
  if (isset($data['tabs'][0]['social_user.topics'])) {
    $data['tabs'][0]['social_user.topics']['#weight'] = -1;
  }

}