{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('socialbase/hero')}}
{{ attach_library('social_landing_page/section.hero_small')}}

{%
  set cover_classes = [
  'paragraph--' ~ paragraph.bundle|clean_class,
  'cover',
  'brand-bg-primary',
  'cover--landing',
  'hero-small',
  hero_small_styled_image_url ? 'cover-img cover-img-gradient',
]
%}

<div{{ attributes.addClass(cover_classes) }} {% if hero_small_styled_image_url %} style="background-image: url('{{ hero_small_styled_image_url }}');" {% endif %}>
  <div class="hero-small__bgimage-overlay"></div>
  {% if node_edit_url %}
    <div class="hero-small-action-button">
      <a href="{{ node_edit_url }}"  title="Edit content" class="btn btn-default btn-floating waves-effect waves-circle">
        <svg class="icon-gray icon-medium">
          <use xlink:href="#icon-edit"></use>
        </svg>
      </a>
    </div>
  {% endif %}

  <div class="cover-wrap container">
    <div class="cover-small">
      <h1 class="page-title">{{ content.field_hero_small_title }}</h1>
      <h3 class="page-subtitle">{{ content.field_hero_small_subtitle }}</h3>
      <footer class="hero-small-footer">
        {{ content.field_hero_small_buttons }}
      </footer>
    </div>
  </div> {# cover-wrap #}
</div> {# cover #}
