<?php

/**
 * @file
 * The Social User Export module.
 */

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Database\Database;
use \Drupal\Core\Database\Query\Select;

/**
 * Implements hook_form_alter().
 */
function social_user_export_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'views_form_user_admin_people_page_1':
      $form['#attached']['library'][] = 'social_user_export/select_all';
      $form['select_all'] = [
        '#type' => 'hidden',
        '#attributes' => [
          'id' => 'select-all',
        ],
      ];

      $form['query'] = [
        '#tree' => TRUE,
      ];

      foreach ($_GET as $key => $value) {
        if (is_array($value)) {
          foreach ($value as $key2 => $value2) {
            $form['query'][$key][$key2] = [
              '#type' => 'hidden',
              '#value' => $value2,
            ];
          }
        }
        else {
          $form['query'][$key] = [
            '#type' => 'hidden',
            '#value' => $value,
          ];
        }
      }
      break;

    case 'views_exposed_form':
      $view = $form_state->get('view');

      if ($view->id() == 'user_admin_people' && $view->current_display = 'page_1') {
        $form['created']['min']['#type'] = 'date';
        $form['created']['min']['#title'] = t('Registered from');
        $form['created']['max']['#type'] = 'date';
        $form['created']['max']['#title'] = t('Registered to');
      }
      break;
  }
}

/**
 * Implements hook_views_data_alter().
 */
function social_user_export_views_data_alter(array &$data) {
  $data['users']['user_bulk_form']['field']['id'] = 'social_user_export_bulk_form';
}

/**
 * Applies the additional filters for export.
 *
 * @var Select $query
 * @var array $conditions
 */
function social_user_export_user_apply_filter(Select $query, array $conditions) {
  $query->join('users_field_data', 'uf', 'uf.uid = u.uid');

  // Apply filters.
  if (!empty($conditions['user'])) {
    $connection = Database::getConnection();
    $or = $query->orConditionGroup();
    $or
      ->condition('uf.name', '%' . $connection->escapeLike($conditions['user']) . '%', 'LIKE')
      ->condition('uf.mail', '%' . $connection->escapeLike($conditions['user']) . '%', 'LIKE');
    $query->condition($or);
  }

  if (!empty($conditions['role']) && $conditions['role'] != t('All')) {
    $query->join('user__roles', 'ur', 'ur.entity_id = u.uid AND ur.roles_target_id = :roles_target_id', [
      ':roles_target_id' => $conditions['role'],
    ]);
  }

  if (!empty($conditions['permission']) && $conditions['permission'] != t('All')) {
    $roles = user_roles(FALSE, $conditions['permission']);
    $roles = array_keys($roles);

    // To except "InvalidQueryException" error when variable $roles is empty.
    $roles[] = -1;

    $query->join('user__roles', 'ur', 'ur.entity_id = u.uid');
    $query->condition('ur.roles_target_id', $roles, 'IN');
  }

  if (isset($conditions['status']) && $conditions['status'] != t('All')) {
    $query->condition('uf.status', $conditions['status']);
  }

  if (!empty($conditions['created']['min']) && !empty($conditions['created']['max'])) {
    $conditions['created'] = array_map('strtotime', $conditions['created']);
    $query->condition('uf.created', array_values($conditions['created']), 'BETWEEN');
  }
}