<?php

/**
 * @file
 * The social profile privacy install file.
 */

use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function social_profile_privacy_install() {
  // Set some default permissions.
  _social_profile_privacy_set_permissions();

  // Update our search indexes for our custom processor..
  _social_profile_privacy_resave_search_indexes();
}

/**
 * Function to set permissions.
 */
function _social_profile_privacy_set_permissions() {
  $roles = Role::loadMultiple();

  /** @var \Drupal\user\Entity\Role $role */
  foreach ($roles as $role) {
    $permissions = _social_profile_privacy_get_permissions($role->id());
    user_role_grant_permissions($role->id(), $permissions);
  }
}

/**
 * Return the permissions per role.
 *
 * @param string $role
 *   The role to get the permissions for.
 *
 * @return array
 *   A list of permissions.
 */
function _social_profile_privacy_get_permissions($role) {
  // Anonymous.
  $permissions['anonymous'] = [];

  // Authenticated.
  $permissions['authenticated'] = array_merge($permissions['anonymous'], []);

  // Content manager.
  $permissions['contentmanager'] = array_merge($permissions['authenticated'], []);

  // Site manager.
  $permissions['sitemanager'] = array_merge($permissions['contentmanager'], [
    'social profile privacy view hidden fields',
  ]);

  // If the requested role is not defined we return no permissions.
  // Drupal will make them inherit the authenticated user permissions.
  if (!isset($permissions[$role])) {
    return [];
  }

  return $permissions[$role];
}

/**
 * Re-saves search indices.
 *
 * This triggers the save for search indices that have profile entities as data.
 * This ensures that the RestrictedNameProcessor is properly added.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _social_profile_privacy_resave_search_indexes() {
  // If the search api module is not installed we have nothing to do.
  if (!\Drupal::moduleHandler()->moduleExists('search_api')) {
    return;
  }

  // We load all indexes, we assume there will never be hundreds of search
  // indexes which would create its own problems for a site.
  $indexes = \Drupal::entityTypeManager()
    ->getStorage('search_api_index')
    ->loadMultiple();

  /** @var \Drupal\search_api\IndexInterface $index */
  foreach ($indexes as $index) {
    // Check if the search index has profile entities as data source.
    if ($index->isValidDatasource('entity:profile')) {
      // Disable and enable the index to ensure that the RestrictedNameProcessor
      // has the chance to add the field.
      $index->save();
    }
  }
}
