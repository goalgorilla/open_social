<?php

/**
 * @file
 * Install, update and uninstall functions for the social_profile module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\Entity\EntityViewMode;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityFormMode;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\file\Entity\File;
use Drupal\file\FileInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\user\Entity\Role;
use Drupal\profile\Entity\Profile;
use Drupal\profile\Entity\ProfileType;
use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_profile.
 */
function social_profile_install() {
  // Add some links.
  _social_profile_create_menu_links();
  // Add default profile image.
  _social_profile_add_default_profile_image();

  _social_profile_install_visibility_fields();
  _social_profile_populate_nationalities_vocabulary('10.3.0');

  // Grant the default permissions for this feature.
  user_role_grant_permissions(
    'authenticated',
    [
      'add own profile profile',
      'update own profile profile',
      'view any profile profile',
      'view own profile profile',
      'view profile',
    ]
  );
  user_role_grant_permissions(
    'contentmanager',
    [
      'add any profile profile',
      'update any profile profile',
      'edit profile tags',
    ]
  );
  user_role_grant_permissions(
    'sitemanager',
    [
      'add any profile profile',
      'update any profile profile',
      'edit profile tags',
      'delete terms in profile_tag',
      'edit terms in profile_tag',
      'administer profile settings',
      'view profile email',
      'view profile language',
    ]
  );

  // Create a profile for user 1.
  Profile::create([
    'type' => ProfileType::load('profile')->id(),
    'uid' => 1,
  ])->save();

}

/**
 * Function to set default profile image if not set already.
 */
function _social_profile_add_default_profile_image() {
  $field_image_config = FieldConfig::load('profile.profile.field_profile_image');
  assert($field_image_config !== NULL, "Trying to set default image for missing field, this is an error in Open Social.");
  $field_image_config_uuid = $field_image_config->uuid();
  assert($field_image_config_uuid !== NULL, "Field config that was loaded is unsaved.");

  // Copy the file from our module to the file system. File::create also accepts
  // a URI directly in our module but that might cause the image to be deleted
  // from our module which means we have to make a copy.
  $file_system = \Drupal::service('file_system');
  $scheme = $field_image_config->getFieldStorageDefinition()->getSetting("uri_scheme");
  $directory = "$scheme://default_images/";
  $file_system->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
  $uri = $file_system->copy(
    \Drupal::service('extension.list.module')->getPath('social_profile') . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'default-profile-picture.png',
    // The image must be in `default_images/` since this folder is
    // special-cased to still allow viewing when in the private filesystem.
    "{$directory}default-profile-picture.png",
    FileSystemInterface::EXISTS_REPLACE
  );

  // Create a file with the UUID that was used in the configuration so the field
  // config actually works.
  $media = File::create([
    'uuid' => $field_image_config->getSetting('default_image')['uuid'],
    'uri' => $uri,
    'status' => FileInterface::STATUS_PERMANENT,
  ]);
  $media->save();

  // Ensure Drupal tracks whether the file is still needed.
  \Drupal::service('file.usage')->add($media, 'image', 'default_image', $field_image_config_uuid);
}

/**
 * Function to create some menu items.
 */
function _social_profile_create_menu_links() {
  $menu_links = MenuLinkContent::loadMultiple();
  $parent = NULL;
  /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $menu_link */
  foreach ($menu_links as $menu_link) {
    if ($menu_link->label() === 'Explore' && $menu_link->isExpanded()) {
      $parent = 'menu_link_content:' . $menu_link->uuid();
    }
  }

  if (!is_null($parent)) {
    MenuLinkContent::create([
      'title' => t('All members'),
      'link' => ['uri' => 'internal:/all-members'],
      'menu_name' => 'main',
      'expanded' => FALSE,
      'weight' => 50,
      'parent' => $parent,
    ])->save();
  }
}

function _social_profile_install_visibility_fields() : void {
  // Create visibility fields for each field on the profile.
  /** @var int[] $ids */
  $ids = \Drupal::entityQuery('field_storage_config')
    ->condition('id', 'profile.', 'STARTS_WITH')
    ->execute();
  // Fetch all fields and key them by field name.
  /** @var \Drupal\field\FieldStorageConfigInterface[] $field_storages */
  $field_storages = FieldStorageConfig::loadMultiple($ids);
  foreach ($field_storages as $field_storage_config) {
    // We skip field_profile_show_email because its value will be put into
    // field_profile_email_visibility instead and the field will then be
    // removed.
    if ($field_storage_config->getName() === 'field_profile_show_email') {
      continue;
    }

    // If this was a field added by an update hook before this one runs in the
    // same update cycle then our hook_insert has already created the visibility
    // field
    if ($field_storage_config->getThirdPartySetting('social_profile', 'visibility_stored_by') !== NULL) {
      continue;
    }

    // Skip fields used for storing visibility settings.
    if ($field_storage_config->getThirdPartySetting('social_profile', 'visibility_for') !== NULL) {
      continue;
    }

    $visibility_storage_config = social_profile_create_visibility_field_storage_config_for($field_storage_config);

    $field_storage_config->setThirdPartySetting('social_profile', 'visibility_stored_by', $visibility_storage_config->id());
    $field_storage_config->save();

    // If there's a configured field on the profile bundle then we also ensure
    // there's a field config entity.
    $field_config = FieldConfig::loadByName('profile', 'profile', $field_storage_config->getName());
    if ($field_config !== NULL) {
      social_profile_ensure_associated_visibility_field_config($field_config);
    }
  }

}

/**
 * Seed the nationalities vocabulary with initial data.
 *
 * Loads from `social_profile/content/nationalities-<version>.yml`. This allows
 * this to be used in update hooks in a predictable manner.
 *
 * @param string $version
 *   The version to load.
 */
function _social_profile_populate_nationalities_vocabulary(string $version) : void {
  $module_path = \Drupal::service('extension.path.resolver')->getPath('module', 'social_profile');
  $data = Yaml::parseFile("$module_path/content/nationalities-$version.yml");

  foreach ($data['nationalities'] as $nationality) {
    Term::create([
      'vid' => 'nationality',
      'name' => $nationality,
    ])->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function social_profile_uninstall() {
  \Drupal::service('config.factory')
    ->getEditable('social_profile.settings')
    ->delete();
}

/**
 * Implements hook_update_last_removed().
 */
function social_profile_update_last_removed() : int {
  // Removed all update hooks before 10.0.
  return 8803;
}

/**
 * Implements hook_update_dependencies().
 */
function social_profile_update_dependencies() {
  // Run the config update after the update_helper module is enabled.
  $dependencies['social_profile'][8808] = [
    'social_core' => 8805,
  ];
  // Run the update hook with the "Grant Profile permissions for the
  // Authenticated user role" only after an update hook "Reassign permissions
  // between roles" in social_core.
  $dependencies['social_profile'][11001] = [
    'social_core' => 11002,
  ];

  // Add variationcache hook update from group as required to fix update path.
  $dependencies['social_profile'][11002] = [
    'group' => 8020,
  ];

  return $dependencies;
}

/**
 * Add a new block to display filters (social_tagging) on all-members page.
 *
 * Load in a config file from an specific update hook that will never change.
 */
function social_profile_update_8901() {
  $config_files = [
    'block.block.exposedformnewest_userspage_newest_users' => \Drupal::service('extension.list.module')->getPath('social_profile') . '/config/static/block.block.exposedformnewest_userspage_newest_users_8901.yml',
    'block.block.socialblue_exposedformnewest_userspage_newest_users' => \Drupal::service('extension.list.module')->getPath('social_profile') . '/config/static/block.block.socialblue_exposedformnewest_userspage_newest_users_8901.yml',
  ];

  foreach ($config_files as $key => $config_file) {
    if (is_file($config_file)) {
      $settings = Yaml::parse(file_get_contents($config_file));
      if (is_array($settings)) {
        $config = \Drupal::configFactory()
          ->getEditable($key);
        $config->setData($settings)->save(TRUE);
      }
    }
  }
}

/**
 * Enable exposed filters block on all-members views.
 */
function social_profile_update_8902() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_profile', 'social_profile_update_8902');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Sets default profile settings.
 */
function social_profile_update_8903() {
  \Drupal::configFactory()
    ->getEditable('social_profile.settings')
    ->set('enable_profile_tagging', TRUE)
    ->save();
}

/**
 * Install Profile name field to profile entity type.
 */
function social_profile_update_8904() {
  // Update hook removed.
}

/**
 * Update field definitions.
 */
function social_profile_update_8905() {
  // Removed in Drupal 9.
}

/**
 * Update profile form labels.
 */
function social_profile_update_10201() : string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_profile', 'social_profile_update_10201');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Update the configs in the database in accordance with the newest schema.
 */
function social_profile_update_10301() : string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_profile', 'social_profile_update_10301');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Grant Profile permissions for the Authenticated user role.
 */
function social_profile_update_11001(): void {
  // Authenticated user role permissions.
  user_role_grant_permissions(
    RoleInterface::AUTHENTICATED_ID,
    [
      'add own profile profile',
      'update own profile profile',
      'view own profile profile',
      'view profile',
    ]
  );
}

/**
 * Add roles filter to the Newest users views.
 */
function social_profile_update_11002(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_profile', __FUNCTION__);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Empty hook update.
 *
 * @see https://github.com/goalgorilla/open_social/pull/2783
 */
function social_profile_update_11003(array &$sandbox): void {
  // This update hook was a part of release in Open Social 11.0.3.
  // @see https://github.com/goalgorilla/open_social/blob/11.0.3/modules/social_features/social_profile/social_profile.install#L557
  // But this update hook accidentally had hook number 11006 in
  // Open Social 11.1.0-rc1, due to an accidental commit.
  // @see https://github.com/goalgorilla/open_social/blob/11.1.0-rc1/modules/social_features/social_profile/social_profile.install#L557
  // So, we removed code in update hook 11003 in favor of
  // social_profile_update_11007().
  // This is the reason why we don't have update hook number 11004 and 11005.
}

/**
 * Empty hook update.
 *
 * @see https://github.com/goalgorilla/open_social/pull/2783
 */
function social_profile_update_11006(array &$sandbox): void {
  // We moved code to social_profile_update_11007().
  // We had to rewrite this code in order to use 'static' or unchangeable
  // representation of config file instead of file from config/install which
  // could be changed in the future.
}

/**
 * Install 'name' view mode on profile.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function social_profile_update_11007(array &$sandbox): void {
  $module_path = \Drupal::service('extension.list.module')->getPath('social_profile');
  $view_mode = EntityViewMode::load('profile.name');

  // Check if the view mode exists, so we don't try to create it again.
  if ($view_mode) {
    return;
  }
  $content = file_get_contents($module_path . '/config/static/core.entity_view_mode.profile.name_11007.yml');
  if (is_string($content)) {
    $yml = Yaml::parse($content);
    try {
      EntityViewMode::create($yml)->save();
      $view_display = EntityViewDisplay::load('profile.profile.name');

      // Check if the view display exists, so we don't try to create it again.
      if ($view_display instanceof EntityInterface) {
        return;
      }
      $content = file_get_contents($module_path . '/config/static/core.entity_view_display.profile.profile.name_11007.yml');
      if (is_string($content)) {
        $yml = Yaml::parse($content);
        EntityViewDisplay::create($yml)->save();
      }
    }
    catch (EntityStorageException $e) {
      \Drupal::logger('social_profile')->error($e->getMessage());
    }
  }
}

/**
 * Add a field for a short description.
 */
function social_profile_update_11201(array &$sandbox): string {
  $entity_type_ids = [
    'field.storage.profile.field_profile_' => 'field_storage_config',
    'field.field.profile.profile.field_profile_' => 'field_config',
  ];

  $path = \Drupal::service('extension.list.module')->getPath('social_profile') . '/config/static/';

  foreach ($entity_type_ids as $prefix => $entity_type_id) {
    $config_file = $path . $prefix . 'summary_11201.yml';
    $settings = Yaml::parseFile($config_file);

    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
    $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);

    $storage->createFromStorageRecord($settings)->save();
  }

  /** @var \Drupal\update_helper\UpdaterInterface $update_helper */
  $update_helper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $update_helper->executeUpdate('social_profile', __FUNCTION__);

  // Output logged messages to related channel of update execution.
  return $update_helper->logger()->output();
}

/**
 * Make the user picture clickable and rounded in a compact profile.
 */
function social_profile_update_11202(): string {
  /** @var \Drupal\update_helper\UpdaterInterface $update_helper */
  $update_helper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $update_helper->executeUpdate('social_profile', __FUNCTION__);

  // Output logged messages to related channel of update execution.
  return $update_helper->logger()->output();
}

/**
 * Make profile related vocabularies translatable.
 */
function social_profile_update_11203(): void {
  if (!\Drupal::moduleHandler()->moduleExists('social_content_translation')) {
    return;
  }

  $config_storage = \Drupal::service('config.storage');
  $config_path = \Drupal::service('extension.list.module')->getPath('social_profile') . '/config/static';
  $source = new FileStorage($config_path);

  $config_names = [
    'language.content_settings.taxonomy_term.expertise' => 'language.content_settings.taxonomy_term.expertise_11203',
    'language.content_settings.taxonomy_term.interests' => 'language.content_settings.taxonomy_term.interests_11203',
    'language.content_settings.taxonomy_term.profile_tag' => 'language.content_settings.taxonomy_term.profile_tag_11203',
  ];

  foreach ($config_names as $name => $static) {
    $config_storage->write($name, (array) $source->read($static));
  }
}

/**
 * Add "Summary" and "Self introduction" fields to the profile teaser.
 */
function social_profile_update_11301(array &$sandbox): string {
  /** @var \Drupal\update_helper\UpdaterInterface $update_helper */
  $update_helper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $update_helper->executeUpdate('social_profile', __FUNCTION__);

  // Output logged messages to related channel of update execution.
  return $update_helper->logger()->output();
}

/**
 * Update exposed filter button name.
 */
function social_profile_update_11401(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_profile', __FUNCTION__);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Fix missed filter block on the all-members page.
 */
function social_profile_update_11701(): string {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('social_profile', __FUNCTION__);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Remove the profile_name field.
 */
function social_profile_update_12001() : void {
  // The profile_name field contains a computed value, but we'll be creating
  // visibility values that allow us to query the parts of the computed value
  // directly instead.
  $field_storage = \Drupal::entityDefinitionUpdateManager()->getFieldStorageDefinition('profile_name', 'profile');
  if ($field_storage !== NULL) {
    \Drupal::entityDefinitionUpdateManager()->uninstallFieldStorageDefinition($field_storage);
  }
}

/**
 * Add email and langcode field to profile.
 */
function social_profile_update_12002() : void {
  // By moving the fields to the profile we can display them from the profile
  // directly and use them with our profile visibility fields. This means we no
  // longer have to jump through hoops to pull the e-mail from the user entity.
  $email_storage = FieldStorageConfig::create([
    'field_name' => "field_profile_email",
    'entity_type' => 'profile',
    'type' => 'email',
    'module' => 'social_profile',
    'translatable' => FALSE,
    'locked' => TRUE,
    'settings' => [
      'max_length' => 255,
    ],
  ]);
  $email_storage->save();

  FieldConfig::create([
    'field_storage' => $email_storage,
    'bundle' => 'profile',
    'langcode' => 'en',
    'label' => new TranslatableMarkup('Email'),
    'required' => TRUE,
    'translatable' => FALSE,
    'settings' => [],
    'field_type' => 'email',
  ])->save();

  $preferred_language_storage = FieldStorageConfig::create([
    'field_name' => "field_profile_preferred_language",
    'entity_type' => 'profile',
    'type' => 'string',
    'module' => 'social_profile',
    'translatable' => FALSE,
    'locked' => TRUE,
  ]);
  $preferred_language_storage->save();

  FieldConfig::create([
    'field_storage' => $preferred_language_storage,
    'bundle' => 'profile',
    'langcode' => 'en',
    'label' => new TranslatableMarkup('Preferred language'),
    'required' => TRUE,
    'translatable' => FALSE,
    'settings' => [
      'max_length' => 255,
    ],
    'field_type' => 'string',
  ])->save();

  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
  $display_repository = \Drupal::service('entity_display.repository');
  $profile_display = $display_repository->getViewDisplay('profile', 'profile');
  // Add email to default profile display.
  $profile_display->setComponent('field_profile_email', [
    'label' => 'above',
    'type' => 'email_mailto',
  ]);
  // Add preferred language to default profile display.
  $profile_display->setComponent('field_profile_preferred_language', [
    'label' => 'above',
    'type' => 'string',
  ]);
  $profile_display->save();

  // @todo Add view mode install configuration.
}

/**
 * Fill new synchronized profile fields.
 */
function social_profile_update_12003(array &$sandbox) : void {
  if (!isset($sandbox['uids'])) {
    /** @var int[] $uids */
    $uids = \Drupal::entityQuery('user')
      ->condition('uid', 0, '!=')
      ->execute();
    $sandbox['uids'] = $uids;
    $sandbox['total'] = count($sandbox['uids']);

    if ($sandbox['total'] === 0) {
      return;
    }

    $sandbox['processed'] = 0;
    $sandbox['batch_size'] = Settings::get('entity_update_batch_size', 50);

  }

  $user_ids = array_splice($sandbox['uids'], 0, $sandbox['batch_size']);

  /** @var \Drupal\user\UserInterface[] $users */
  $users = User::loadMultiple($user_ids);
  /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
  $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

  foreach ($users as $user) {
    $profile = $profile_storage->loadByUser($user, 'profile');
    // All users in Open Social are required to have a profile at this time.
    if ($profile === NULL) {
      // It's possible that the user was turned into a "deleted user". This is
      // functionality introduced in Social Chat which will come to Open Social
      // with OAuth. These users did not yet have blank profiles created
      // automatically before `social_profile_ensure_default_user_profile` was
      // introduced.
      if (strpos($user->getAccountName(), "__DELETED_USER_") === 0) {
        $profile = social_profile_ensure_default_user_profile($user);
      }
      else {
        throw new \RuntimeException("User (id: {$user->id()} is missing a profile.");
      }
    }
    social_profile_sync_user_fields_to_profile($user, $profile);
  }

  $sandbox['processed'] += count($user_ids);
  $sandbox['#finished'] = $sandbox['processed'] / $sandbox['total'];
}

/**
 * Install visibility profile fields.
 */
function social_profile_update_12004() : void {
  // We do this for all currently existing fields regardless of when this update
  // hook runs since we have other methods in place to catch newly created
  // fields and filter out previously updated fields.
  _social_profile_install_visibility_fields();
}

/**
 * Install or adopt social profile fields fields.
 */
function social_profile_update_12005() : void {
  $config_factory = \Drupal::configFactory();
  $nationality_config = $config_factory->getEditable('taxonomy.vocabulary.nationality');
  // If the vocabulary already exists then we need to swap the enforced
  // dependency.
  if (!$nationality_config->isNew()) {
    $dependencies = $nationality_config->get('dependencies');
    $dependencies['enforced']['module'] = array_filter(
      $dependencies['enforced']['module'],
      static fn (string $module) => $module !== 'social_profile_fields'
    );
    $dependencies['enforced']['module'][] = 'social_profile';
    $nationality_config->set('dependencies', $dependencies)->save(TRUE);
  }
  // Otherwise we create the vocabulary.
  else {
    Vocabulary::create([
      'vid' => 'nationality',
      'name' => new TranslatableMarkup('Nationality'),
      'description' => new TranslatableMarkup('Nationalities'),
      'dependencies' => [
        'enforced' => [
          'module' => ['social_profile'],
        ],
      ],
    ])->save();

    // For the new vocabulary we must also load the default data set.
    _social_profile_populate_nationalities_vocabulary('10.3.0');
  }

  // Add nationality as profile field if it doesn't already exist.
  $nationality_storage_config = $config_factory->getEditable('field.storage.profile.field_profile_nationality');
  if (!$nationality_storage_config->isNew()) {
    // Remove social_profile_fields as dependency and instead properly set our
    // profile module as provider rather than core.
    $dependencies = $nationality_storage_config->get('dependencies');
    $dependencies['enforced']['module'] = array_filter(
      $dependencies['enforced']['module'],
      static fn (string $module) => $module !== 'social_profile_fields'
    );
    $nationality_storage_config
      ->set('dependencies', $dependencies)
      ->set('module', 'social_profile')
      ->save(TRUE);
  }
  else {
    FieldStorageConfig::create([
      'field_name' => "field_profile_nationality",
      'entity_type' => 'profile',
      'type' => 'entity_reference',
      'module' => 'social_profile',
      'translatable' => FALSE,
      'settings' => [
        'target_type' => 'taxonomy_term',
      ],
    ])->save();
  }

  $nationality_field_config = $config_factory->getEditable('field.field.profile.profile.field_profile_nationality');
  if (!$nationality_field_config->isNew()) {
    // Remove social_profile_fields as dependency and do not add a module
    // dependency since we depend only on the storage (which already specifies
    // the module).
    $dependencies = $nationality_field_config->get('dependencies');
    $dependencies['enforced']['module'] = array_filter(
      $dependencies['enforced']['module'],
      static fn (string $module) => $module !== 'social_profile_fields'
    );
    $nationality_field_config
      ->set('dependencies', $dependencies)
      ->save(TRUE);
  }
  else {
    FieldConfig::create([
      'field_storage' => FieldStorageConfig::load('profile.field_profile_nationality'),
      'bundle' => 'profile',
      'label' => new TranslatableMarkup('Nationality'),
      'required' => FALSE,
      'translatable' => FALSE,
      'settings' => [
        'handler' => 'default:taxonomy_term',
        'handler_settings' => [
          'target_bundles' => [
            'nationality' => 'nationality',
          ],
          'sort' => [
            'field' => 'name',
            'direction' => 'asc',
          ],
          'auto_create' => FALSE,
          'auto_create_bundle' => '',
        ],
      ],
      'field_type' => 'entity_reference',
    ])->save();
  }

  // Add the nick name field if it doesn't already exist.
  $nick_name_storage_config = $config_factory->getEditable('field.storage.profile.field_profile_nick_name');
  if (!$nick_name_storage_config->isNew()) {
    // Remove social_profile_fields as dependency and instead properly set our
    // profile module as provider rather than core.
    $dependencies = $nick_name_storage_config->get('dependencies');
    $dependencies['enforced']['module'] = array_filter(
      $dependencies['enforced']['module'],
      static fn (string $module) => $module !== 'social_profile_fields'
    );
    $nick_name_storage_config
      ->set('dependencies', $dependencies)
      ->set('module', 'social_profile')
      ->save(TRUE);
  }
  else {
    FieldStorageConfig::create([
      'field_name' => "field_profile_nick_name",
      'entity_type' => 'profile',
      'type' => 'string',
      'module' => 'social_profile',
      'translatable' => FALSE,
      'cardinality' => 1,
      'settings' => [
        'max_length' => 255,
        'is_ascii' => FALSE,
        'case_sensitive' => FALSE,
      ],
    ])->save();
  }

  $nick_name_field_config = $config_factory->getEditable('field.field.profile.profile.field_profile_nick_name');
  if (!$nick_name_field_config->isNew()) {
    // Remove social_profile_fields as dependency and do not add a module
    // dependency since we depend only on the storage (which already specifies
    // the module).
    $dependencies = $nick_name_field_config->get('dependencies');
    $dependencies['enforced']['module'] = array_filter(
      $dependencies['enforced']['module'],
      static fn (string $module) => $module !== 'social_profile_fields'
    );
    $nick_name_field_config
      ->set('dependencies', $dependencies)
      ->save(TRUE);
  }
  else {
    FieldConfig::create([
      'field_storage' => FieldStorageConfig::load('profile.field_profile_nick_name'),
      'bundle' => 'profile',
      'label' => new TranslatableMarkup('Nickname'),
      'required' => FALSE,
      'translatable' => FALSE,
      'settings' => [],
      'field_type' => 'string',
    ])->save();
  }
}

/**
 * Delete permissions provided by merged social profile fields module.
 */
function social_profile_update_12006() : void {
  // This permission is revoked from all roles as it duplicates the broader
  // `administer profile settings` permissions which we would give out to the
  // exact same roles.
  foreach (Role::loadMultiple() as $role) {
    user_role_revoke_permissions($role->id(), ['social profile fields change used profile fields']);
  }
}

/**
 * Create a form mode for profiles during registration.
 */
function social_profile_update_12007() : void {
  if (EntityFormMode::load('profile.register') === NULL) {
    EntityFormMode::create([
      'langcode' => 'en',
      'status' => TRUE,
      'dependencies' => [
        'module' => 'profile',
      ],
      'id' => 'profile.register',
      'label' => 'Register',
      'targetEntityType' => 'profile',
      'cache' => TRUE,
    ])->save();
  }
}

/**
 * Make default profile always available during registration.
 *
 * @todo This needs an install hook too.
 */
function social_profile_update_12008() : void {
  // This makes the profile available in registration always so that we can
  // control the fields that are shown by changing the registration view mode.
  // We can also change this setting dynamically but that would not persist the
  // separate view mode and we may not want to show the entire profile on
  // registration.
  /** @var \Drupal\profile\Entity\ProfileTypeInterface $profile_type */
  $profile_type = ProfileType::load('profile');
  $profile_type
    ->setRegistration(TRUE)
    ->save();

  // Create a profile register display if it does not yet exist.
  $register_profile_display = EntityFormDisplay::load('profile.profile.register');
  if ($register_profile_display === NULL) {
    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $register_default_display */
    $register_default_display = EntityFormDisplay::load('profile.profile.default');
    $register_profile_display = $register_default_display->createCopy('register');

    // We don't want field groups on our registration form because nested
    // fieldsets don't look right.
    foreach ($register_profile_display->getThirdPartySettings('field_group') as $setting_name => $_) {
      $register_profile_display->unsetThirdPartySetting('field_group', $setting_name);
    }

    // We don't touch pre-configured register fields but we don't add any by
    // default.
    foreach ($register_profile_display->getComponents() as $name => $_) {
      $register_profile_display->removeComponent($name);
    }

    $register_profile_display->save();
  }

  // This user form display is made in ProfileType::postSave.
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $register_user_display */
  $register_user_display = EntityFormDisplay::load('user.user.register');
  $profile_widget = $register_user_display->getComponent('profile_profiles');
  $profile_widget['settings']['form_mode'] = 'register';
  $register_user_display->setComponent('profile_profiles', $profile_widget);
  $register_user_display->save();

  // @todo Clean up profile creation in `social_profile_user_insert`.
  // @todo Create separate update hook for social_profile_registration
  // extension.
}

/**
 * Migrate social_profile_fields settings into social_profile.
 */
function social_profile_update_12009() : void {
  $default_field_status = [
    "field_profile_nick_name" => FALSE,
    "field_profile_address" => TRUE,
    "field_profile_banner_image" => TRUE,
    "field_profile_expertise" => TRUE,
    "field_profile_first_name" => TRUE,
    "field_profile_function" => TRUE,
    "field_profile_image" => TRUE,
    "field_profile_interests" => TRUE,
    "field_profile_last_name" => TRUE,
    "field_profile_nationality" => TRUE,
    "field_profile_organization" => TRUE,
    "field_profile_organization_tag" => TRUE,
    "field_profile_phone_number" => TRUE,
    "field_profile_profile_tag" => TRUE,
    "field_profile_self_introduction" => TRUE,
  ];

  $social_profile_settings = \Drupal::configFactory()->getEditable('social_profile.settings');

  // Just try to load the fields config. If it doesn't exist we get an empty
  // config object and can fall back to default values.
  $social_profile_fields_settings = \Drupal::configFactory()->getEditable('social_profile_fields.settings');

  /** @var int[] $ids */
  $ids = \Drupal::entityQuery('field_config')
    ->condition('id', 'profile.profile.', 'STARTS_WITH')
    ->execute();
  // Fetch all fields and key them by field name.
  /** @var \Drupal\field\FieldConfigInterface[] $field_configs */
  $field_configs = FieldConfig::loadMultiple($ids);
  foreach ($field_configs as $field_config) {
    // We're only interested in fields that contain actual values.
    /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage */
    $field_storage = $field_config->getFieldStorageDefinition();
    if ($field_storage->getThirdPartySetting('social_profile', 'visibility_for') !== NULL) {
      continue;
    }

    // Use the previously configured status if it exists, or fall back to our
    // default settings. If neither exists we just enable the field because it's
    // probably custom and added with a reason.
    $field_config->setStatus($social_profile_fields_settings->get("profile_profile_" . $field_config->getName()) ?? $default_field_status[$field_config->getName()] ?? TRUE);
    $field_config->save();
  }

  // @todo Add nickname_unique_validation schema.
  $social_profile_settings->set("nickname_unique_validation", (bool) $social_profile_fields_settings->get("nickname_unique_validation"));
  $social_profile_settings->save();

  // @todo This doesn't handle "field_profile_show_email" => null,
  // @todo This doesn't handle address subfields.
  // Clean up the config that's no longer used.
  $social_profile_fields_settings->delete();
}
