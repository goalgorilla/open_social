<?php

/**
 * @file
 * Install, update and uninstall functions for the social_profile module.
 */

use Drupal\Core\File\FileExists;
use Drupal\Core\File\FileSystemInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\file\Entity\File;
use Drupal\file\FileInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\profile\Entity\Profile;
use Drupal\profile\Entity\ProfileType;
use Drupal\user\RoleInterface;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_profile.
 */
function social_profile_install() {
  // Grant the default permissions for this feature.
  user_role_grant_permissions(
    RoleInterface::AUTHENTICATED_ID,
    [
      'update own profile profile',
      'view own profile profile',
    ]
  );
  user_role_grant_permissions(
    'verified',
    [
      'view any profile profile',
    ]
  );
  user_role_grant_permissions(
    'contentmanager',
    [
      'view any profile profile',
      'update any profile profile',
      'edit profile tags',
    ]
  );
  user_role_grant_permissions(
    'sitemanager',
    [
      'view any profile profile',
      'update any profile profile',
      'edit profile tags',
      'delete terms in profile_tag',
      'edit terms in profile_tag',
      'create terms in profile_tag',
      'administer profile settings',
      'view profile email',
      'view profile language',
    ]
  );
  // Add some links.
  $parents = \Drupal::entityTypeManager()->getStorage('menu_link_content')
    ->loadByProperties(['menu_name' => 'main', 'title' => 'Explore', 'expanded' => TRUE]);
  $parent = reset($parents);
  if ($parent !== FALSE) {
    MenuLinkContent::create([
      'title' => t('All members'),
      'link' => ['uri' => 'internal:/all-members'],
      'menu_name' => 'main',
      'expanded' => FALSE,
      'weight' => 50,
      'parent' => 'menu_link_content:' . $parent->uuid(),
    ])->save();
  }

  // Add default profile image.
  _social_profile_add_default_profile_image();

  // Create a profile for user 1.
  Profile::create([
    'type' => ProfileType::load('profile')->id(),
    'uid' => 1,
  ])->save();
}

/**
 * Function to set default profile image if not set already.
 */
function _social_profile_add_default_profile_image() {
  $field_image_config = FieldConfig::load('profile.profile.field_profile_image');
  assert($field_image_config !== NULL, "Trying to set default image for missing field, this is an error in Open Social.");
  $field_image_config_uuid = $field_image_config->uuid();
  assert($field_image_config_uuid !== NULL, "Field config that was loaded is unsaved.");

  // Copy the file from our module to the file system. File::create also accepts
  // a URI directly in our module but that might cause the image to be deleted
  // from our module which means we have to make a copy.
  $file_system = \Drupal::service('file_system');
  $scheme = $field_image_config->getFieldStorageDefinition()->getSetting("uri_scheme");
  $directory = "$scheme://default_images/";
  $file_system->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
  $uri = $file_system->copy(
    \Drupal::service('extension.list.module')->getPath('social_profile') . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'default-profile-picture.png',
    // The image must be in `default_images/` since this folder is
    // special-cased to still allow viewing when in the private filesystem.
    "{$directory}default-profile-picture.png",
    FileExists::Replace
  );

  // Create a file with the UUID that was used in the configuration so the field
  // config actually works.
  $media = File::create([
    'uuid' => $field_image_config->getSetting('default_image')['uuid'],
    'uri' => $uri,
    'status' => FileInterface::STATUS_PERMANENT,
  ]);
  $media->save();

  // Ensure Drupal tracks whether the file is still needed.
  \Drupal::service('file.usage')->add($media, 'image', 'default_image', $field_image_config_uuid);
}

/**
 * Implements hook_uninstall().
 */
function social_profile_uninstall() {
  \Drupal::service('config.factory')
    ->getEditable('social_profile.settings')
    ->delete();
}

/**
 * Implements hook_update_last_removed().
 */
function social_profile_update_last_removed() : int {
  return 111101;
}

/**
 * Add new permissions for taxonomies.
 */
function social_profile_update_121001(): void {
  // Nothing to do if the module is not installed.
  if (!\Drupal::moduleHandler()->moduleExists("taxonomy_access_fix")) {
    return;
  }

  // Permission to grant.
  $taxonomy_permissions = [
    'view terms in interests',
    'view term names in interests',
    'select terms in interests',
    'view terms in expertise',
    'view term names in expertise',
    'select terms in expertise',
    'view terms in profile_tag',
    'view term names in profile_tag',
    'select terms in profile_tag',
  ];

  // Authenticated roles.
  $authenticated_roles = [
    'sitemanager',
    'verified',
    'contentmanager',
  ];

  // Load the permission.
  $entity_type_manager = \Drupal::entityTypeManager();
  foreach ($authenticated_roles as $role) {
    /** @var \Drupal\user\RoleInterface $role */
    $role = $entity_type_manager->getStorage('user_role')->load($role);

    // If the role is not have the permission, grant permission.
    foreach ($taxonomy_permissions as $taxonomy_permission) {
      if (!$role->hasPermission($taxonomy_permission)) {
        $role->grantPermission($taxonomy_permission);
        $role->save();
      }
    }
  }

  // For anonymous role, we need to check the if Registration Fields is enabled.
  if (!\Drupal::moduleHandler()->moduleExists("social_registration_fields")) {
    return;
  }

  // Load anonymous role.
  /** @var \Drupal\user\RoleInterface $role */
  $role = $entity_type_manager->getStorage('user_role')->load('anonymous');

  // If the role is not have the permission, grant permission.
  foreach ($taxonomy_permissions as $taxonomy_permission) {
    if (!$role->hasPermission($taxonomy_permission)) {
      $role->grantPermission($taxonomy_permission);
      $role->save();
    }
  }
}

/**
 * Grant permissions for SM to create terms in profile_tag vocabulary.
 */
function social_profile_update_130001(): void {
  user_role_grant_permissions('sitemanager', ['create terms in profile_tag']);
}

/**
 * Update views /all-members to hide blocked members.
 */
function social_profile_update_130002(): void {
  $moduleHandler = \Drupal::moduleHandler();
  if ($moduleHandler->moduleExists('views') === FALSE ||
    $moduleHandler->moduleExists('user') === FALSE ||
    $moduleHandler->moduleExists('profile') === FALSE
  ) {
    return;
  }

  $config_file = \Drupal::service('extension.list.module')->getPath('social_profile') . '/config/install/views.view.newest_users.yml';
  if (file_exists($config_file) === FALSE) {
    \Drupal::logger('social_profile')->info('Configuration file for view "newest_users" not found.');
    return;
  }

  $view_config = Yaml::parseFile($config_file);
  \Drupal::configFactory()->getEditable('views.view.newest_users')
    ->setData($view_config)
    ->save();
  \Drupal::logger('social_profile')->info('The view "newest_users" has been updated with new configuration.');
}

/**
 * Hide path field from Profile Tag, Interests and Expertise taxonomies.
 */
function social_profile_update_130003(): void {
  $taxonomies = [
    'profile_tag' => 'Profile Tag',
    'interests' => 'Interests',
    'expertise' => 'Expertise',
  ];

  foreach ($taxonomies as $taxonomy_id => $taxonomy_name) {
    _social_profile_hide_path_field_from_entity_form_display($taxonomy_id, $taxonomy_name);
  }
}

/**
 * Create entity-form-display or hidden path field from a taxonomy.
 *
 * @param string $taxonomy_id
 *   Taxonomy ID.
 * @param string $taxonomy_name
 *   Taxonomy Label (Name).
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _social_profile_hide_path_field_from_entity_form_display(string $taxonomy_id, string $taxonomy_name): void {
  $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
  $form_display = $storage->load(sprintf('taxonomy_term.%s.default', $taxonomy_id));

  // When entity-form-display isn't be created,
  // It will be created from the install folder.
  if (empty($form_display)) {
    // Get file from install folder and check if it exists.
    $config_file = \Drupal::service('extension.list.module')->getPath('social_profile') . sprintf('/config/install/core.entity_form_display.taxonomy_term.%s.default.yml', $taxonomy_id);
    if (file_exists($config_file) === FALSE) {
      $message = sprintf('Configuration file for entity-form-display "%s" not found.', $taxonomy_id);
      \Drupal::logger('social_profile')->error($message);
      return;
    }

    // Apply the configuration to create entity-form-display.
    $view_config = Yaml::parseFile($config_file);
    \Drupal::configFactory()
      ->getEditable(sprintf('core.entity_form_display.taxonomy_term.%s.default', $taxonomy_id))
      ->setData($view_config)
      ->save();
  }
  else {
    // Get fields and check if path is already be hidden.
    $hidden = $form_display->get('hidden');
    $content = $form_display->get('content');
    if (in_array('path', array_keys($hidden))) {
      $message = sprintf('The path field already is hidden on %s taxonomy.', $taxonomy_name);
      \Drupal::logger('social_profile')->info($message);
      return;
    }

    // Manipulate path field to be hidden and save.
    $hidden['path'] = TRUE;
    unset($content['path']);
    $form_display->set('hidden', $hidden)
      ->set('content', $content)
      ->save();
  }
}
