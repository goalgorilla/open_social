<?php

/**
 * @file
 * Entity Access By Field module file.
 */

use Drupal\entity_access_by_field\EntityAccessHelper;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;

// @todo: Prevent creating multiple visibility fields on one node.
// @todo: Add support for multiple entity types.

/**
 * Here we define a constant for our node access grant ID.
 */
define('ENTITY_ACCESS_BY_FIELD_ALLOWED_REALM', 1);

/**
 * Implements hook_node_access().
 */
function entity_access_by_field_node_access(NodeInterface $node, $op, AccountInterface $account) {
  return EntityAccessHelper::getEntityAccessResult($node, $op, $account);
}

/**
 * Implements hook_node_grants().
 */
function entity_access_by_field_node_grants(AccountInterface $account, $op) {
  $grants = [];
  if ($op === 'view') {

    // @TODO Check performance hit, this is not cached.
    $entityAccessPermissions = \Drupal::getContainer()
      ->get('entity_access_by_field.permissions');
    $permissions = $entityAccessPermissions->getRealmWithPermission();

    if (!empty($permissions)) {
      foreach ($permissions as $realm => $permission) {
        if ($account->hasPermission($permission)) {
          $grants[$realm][] = ENTITY_ACCESS_BY_FIELD_ALLOWED_REALM;
        }
        $grants[$realm . '_author'] = array($account->id());
      }
    }
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function entity_access_by_field_node_access_records(NodeInterface $node) {

  $grants = [];

  // Get the field definitions of the node.
  $field_definitions = $node->getFieldDefinitions();
  /* @var \Drupal\Core\Field\FieldConfigInterface $field_definition */
  foreach ($field_definitions as $field_name => $field_definition) {
    // Lets add a node access realm if the field is implemented.
    if ($field_definition->getType() === 'entity_access_field') {
      $field_values = $node->get($field_name)->getValue();
      if (!empty($field_values)) {
        foreach ($field_values as $key => $field_value) {
          if (isset($field_value['value'])) {
            $entityAccessPermissions = \Drupal::getContainer()
              ->get('entity_access_by_field.permissions');
            $realm = $entityAccessPermissions->getRealmForFieldValue('view', 'node', $node->getType(), $field_name, $field_value['value']);
            if ($node->isPublished()) {
              $grants[] = array(
                'realm' => $realm,
                'gid' => ENTITY_ACCESS_BY_FIELD_ALLOWED_REALM,
                'grant_view' => 1,
                'grant_update' => 0,
                'grant_delete' => 0,
                'priority' => 0,
              );
            }
            $grants[] = array(
              'realm' => $realm . '_author',
              'gid' => $node->getOwnerId(),
              'grant_view' => 1,
              'grant_update' => 1,
              'grant_delete' => 1,
              'priority' => 0,
            );
          }
        }
      }
    }
  }

  return $grants;
}

/**
 * Implements hook_node_access_explain().
 */
function entity_access_by_field_node_access_explain($row) {

  $entityAccessPermissions = \Drupal::getContainer()
    ->get('entity_access_by_field.permissions');
  $permissions = $entityAccessPermissions->getRealmWithPermission();

  foreach ($permissions as $realm => $permission) {
    if ($row->realm === $realm) {
      return 'Users with permission "' . $permission . '" may view this node.';
    }
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function entity_access_by_field_field_widget_info_alter(&$info) {
  if (isset($info['options_buttons'])) {
    $info['options_buttons']['field_types'][] = 'entity_access_field';
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function entity_access_by_field_field_formatter_info_alter(array &$info) {
  if (isset($info['list_default'])) {
    $info['list_default']['field_types'][] = 'entity_access_field';
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function entity_access_by_field_node_presave(NodeInterface $node) {
  $original = $node->original;

  // Get the field definitions of the node.
  $field_definitions = $node->getFieldDefinitions();
  /* @var \Drupal\Core\Field\FieldConfigInterface $field_definition */
  foreach ($field_definitions as $field_name => $field_definition) {
    // Lets add a node access realm if the field is implemented.
    if ($field_definition->getType() === 'entity_access_field') {
      if (isset($node->status) && isset($original->status) && $node->status->value != $original->status->value) {
        // Invalidate cache tags.
        Cache::invalidateTags(array('activity_list'));
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function entity_access_by_field_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (isset($form['field_content_visibility']) || isset($form['field_visibility'])) {

    // Fetch the data.
    $config = \Drupal::config('entity_access_by_field.settings');
    $data = $config->getRawData();
    // Load the current user.
    $account = \Drupal::currentUser();

    // Check if the option is enabled and the current user has no permission
    // to override disabled public visibility.
    if (isset($data['disable_public_visibility']) && $data['disable_public_visibility'] === 1 && !$account->hasPermission('override disabled public visibility')) {

      // This is for nodes.
      if (isset($form['field_content_visibility'])) {
        // Some vars for easier reading.
        $widget = &$form['field_content_visibility']['widget'];
        $route_name = \Drupal::routeMatch()->getRouteName();

        // Remove the public option.
        $widget['#disabled'] = TRUE;
        // Check if the public options is selected on node add. Than we
        // change it to community. Just to make sure LU will always have
        // community selected on creating new nodes. On node edit we don't
        // want this behavior because SM can change the visibility.
        $widget['#title'] = t('The visibility setting has been disabled. In order to change the visibility, please contact a site manager.')->render();
        if ($route_name == 'node.add' && $widget['#default_value'] === 'public') {
          // Set the default value to community.
          $widget['#default_value'] = 'community';
        }
      }
      // This is for posts.
      else {
        $widget = &$form['field_visibility']['widget'][0];
        $options = &$form['field_visibility']['widget'][0]['#options'];

        // Remove the public option.
        unset($options[1]);

        // Check if the public options is currently selected.
        if ($widget['#default_value'] === '1') {
          $widget['#default_value'] = '2';
        }
      }
    }
  }
}
