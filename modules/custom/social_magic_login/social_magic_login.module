<?php

/**
 * @file
 * The Social Magic Login module.
 */

use Drupal\user\UserInterface;

/**
 * Implements hook_token_info().
 */
function social_magic_login_token_info() {
  $types['auto-login'] = [
    'name' => t('Automatic login'),
    'description' => t('Login tokens related to individual user accounts for easy access.'),
    'needs-data' => 'user',
  ];

  $tokens['auto-login']['group-destination'] = [
    'name' => t('Group destination'),
  ];
  $tokens['auto-login']['view-destination'] = [
    'name' => t('View destination'),
    'type' => 'view',
  ];
  $tokens['auto-login']['url-destination'] = [
    'name' => t('Url destination'),
    'type' => 'url',
  ];

  return [
    'types' => $types,
    'tokens' => $tokens,
  ];
}

/**
 * Implements hook_tokens().
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function social_magic_login_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $token_service = \Drupal::token();
  $url_options = ['absolute' => TRUE];
  $replacements = [];

  if ($type === 'auto-login' && !empty($data['user'])) {
    /** @var \Drupal\user\UserInterface $account */
    $account = $data['user'];

    foreach ($tokens as $token => $original) {
      // This is the default variation on the chained tokens handled below.
      if ('group-destination' === $token) {
        /** @var \Drupal\group\Entity\GroupInterface $group */
        $group = &$data['group'];

        $destination = $group->toUrl('canonical', [
          'absolute' => FALSE,
        ])->toString();

        $url = social_magic_login_url_create($account, $destination, $url_options);

        $replacements[$original] = $url->toString();
      }
    }

    if ($auto_login_tokens = $token_service->findWithPrefix($tokens, 'view-destination')) {
      /** @var \Drupal\views\ViewEntityInterface $view */
      $view = &$data['view'];
      $generated = $token_service->generate('view', $auto_login_tokens, ['view' => $view], $options, $bubbleable_metadata);
      $replacements += social_magic_login_url_create($account, $generated, $url_options);
    }
  }

  return $replacements;
}

/**
 * Wrapper method for Service MagicUrlCreate.
 *
 * @see \Drupal\social_magic_login\Service\MagicUrlCreate::create
 */
function social_magic_login_url_create(UserInterface $account, $destination, array $options) {
  $magic_url_service = \Drupal::service('social_magic_login.create_url');
  return $magic_url_service->create($account, $destination, $options);
}
