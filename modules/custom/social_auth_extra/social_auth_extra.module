<?php

/**
 * @file
 * Contains social_auth_extra.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\social_api\Plugin\NetworkBase;
use Drupal\Component\Render\PlainTextOutput;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_auth_extra_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($social_buttons = _social_auth_extra_get_buttons('register')) {
    $form += $social_buttons;

    $form['account']['title'] = array(
      '#type' => 'html_tag',
      '#tag' => 'label',
      '#attributes' => array(
        'class' => array('form-wrapper__label'),
      ),
      '#weight' => -100,
      '#value' => t('Or sign up with email'),
    );
  }

  $request = \Drupal::request();

  if ($provider = $request->get('provider')) {
    $network_manager = \Drupal::service('plugin.network.manager');
    $networks = $network_manager->getDefinitions();

    foreach ($networks as $key => $network) {
      $instance = $network_manager->createInstance($network['id']);

      if ($instance->isActive() && $instance->getSocialNetworkKey() == $provider) {
        $form_state->set('network_instance', $instance);
        $data_handler = $instance->getDataHandler();

        // Get the username from social network if it possible.
        if (($sdk = $network_manager->createInstance($network['id'])->getSdk()) && ($access_token = $instance->getDataHandler()->get('access_token'))) {
          $auth_manager = \Drupal::service($network['id'] . '.auth_manager');
          $auth_manager->setSdk($sdk);
          $auth_manager->setAccessToken($access_token);
          $name = $auth_manager->getUsername();
        }

        // If username is not given from social network, generate it based on
        // first name and last name.
        if (empty($name)) {
          // Translate to lowercase and remove unnecessary symbols.
          $name = strtolower($data_handler->get('name'));
          $name = str_replace('  ', ' ', $name);
          $name = preg_replace('/[^0-9a-z]/si', '_', $name);
        }

        // The user already selected an authentication method and there
        // will be a drupal_set_message informing the user.
        unset($form['social_auth_extra']);
        unset($form['account']['title']);

        $form['account']['mail']['#default_value'] = $data_handler->get('mail');
        $form['account']['name']['#default_value'] = $name;
        $form['actions']['submit']['#submit'] = ['social_auth_extra_form_user_register_form_submit'];
        break;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function social_auth_extra_form_social_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($social_buttons = _social_auth_extra_get_buttons('login')) {
    $form += $social_buttons;

    $form['title'] = array(
      '#type' => 'html_tag',
      '#tag' => 'label',
      '#attributes' => array(
        'class' => array('form-wrapper__label'),
      ),
      '#weight' => -10,
      '#value' => t('Or log in with username or email'),
    );
  }
}

/**
 * Returns form array with social network auth buttons.
 */
function _social_auth_extra_get_buttons($type = 'login') {
  $form = array();

  $network_manager = \Drupal::service('plugin.network.manager');
  $networks = $network_manager->getDefinitions();
  $provider = \Drupal::request()->get('provider');

  if (!empty($networks)) {
    $form['social_auth_extra'] = array(
      '#type' => 'fieldset',
      '#title' => t('%action with', array(
        '%action' => $type == 'register' ? t('Sign up') : t('Log in'),
      )),
      '#weight' => -100,
    );

    foreach ($networks as $key => $network) {
      $instance = $network_manager->createInstance($network['id']);
      $status = \Drupal::config("{$key}.settings")->get('status');
      $network_btnlabel = strtolower('btn--' . $network['social_network']);
      $btn_attributes = array(
        'class' => array('btn', 'btn--with-bgicon', $network_btnlabel),
      );

      if ($provider && $provider != $instance->getSocialNetworkKey()) {
        $btn_attributes['disabled'] = 'disabled';
      }

      if ($status) {
        $form['social_auth_extra'][$key] = array(
          '#type' => 'link',
          '#title' => $network['social_network'],
          '#url' => Url::fromRoute("{$key}.user_{$type}"),
          '#attributes' => $btn_attributes,
        );
      }
    }

    // If there are no any active network, hide fieldset.
    if (empty(array_intersect_key($networks, $form['social_auth_extra']))) {
      unset($form['social_auth_extra']);
    }
  }

  return $form;
}

/**
 * Custom submit function for user_register_form.
 *
 * This function is using for registration via social network.
 */
function social_auth_extra_form_user_register_form_submit($form, FormStateInterface $form_state) {
  /* @var $instance NetworkBase */
  if (($instance = $form_state->get('network_instance')) && $instance instanceof NetworkBase) {
    $id = $instance->getPluginId();
    $user_manager = \Drupal::service($id . '.user_manager');
    $account = $user_manager->createAccount([
      'name' => $form_state->getValue('name'),
      'mail' => $form_state->getValue('mail'),
      'init' => $form_state->getValue('mail'),
    ]);

    try {
      $network_manager = \Drupal::service('plugin.network.manager');

      if (($sdk = $network_manager->createInstance($id)->getSdk()) && ($access_token = $instance->getDataHandler()->get('access_token'))) {
        $auth_manager = \Drupal::service($id . '.auth_manager');
        $auth_manager->setSdk($sdk);
        $auth_manager->setAccessToken($access_token);

        if ($social_profile = $auth_manager->getProfile()) {
          /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
          $module_handler = \Drupal::service('module_handler');
          // Set id of social profile to account and save.
          $account_id = $auth_manager->getAccountId();
          $user_manager->setAccountId($account_id);
          $module_handler->invokeAll('social_auth_extra_user_presave', [
            $account,
            $auth_manager,
            $user_manager,
          ]);
          $account->save();
          $form_state->getFormObject()->setEntity($account);

          if ($module_handler->moduleExists('profile')) {
            // Create profile if it doesn't exists.
            /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
            $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

            if (!$profile = $profile_storage->loadByUser($account, 'profile', TRUE)) {
              $profile = $user_manager->createProfile();
            }
            else {
              $user_manager->setProfile($profile);
            }

            $module_handler->invokeAll('social_auth_extra_profile_presave', [
              $account,
              $profile,
              $auth_manager,
              $user_manager,
            ]);
            $profile->save();

            // Redirect to profile.
            $form_state->setRedirect(
              'entity.profile.type.user_profile_form', [
                'user' => $account->id(),
                'profile_type' => 'profile',
                [],
              ]
            );
          }
          else {
            // If the profile module does not exist redirect to account form.
            $form_state->setRedirect('entity.user.edit_form', [
              'user' => $account->id(),
            ]);
          }
        }
      }

      if (!$account->id()) {
        $module_handler->invokeAll('social_auth_extra_user_presave', [
          $account,
          $auth_manager,
          $user_manager,
        ]);
        $account->save();
        $form_state->getFormObject()->setEntity($account);
      }

      user_login_finalize($account);
      drupal_set_message(t('Your account is created. We have sent an email with your account details. You can now start exploring @community_name.', [
        '@community_name' => \Drupal::config('system.site')->get('name'),
      ]));

      // Send email notification.
      $params['account'] = $account;
      $langcode = $account->getPreferredLangcode();
      $site_mail = \Drupal::config('system.site')->get('mail_notification');

      if (empty($site_mail)) {
        $site_mail = \Drupal::config('system.site')->get('mail');
      }

      if (empty($site_mail)) {
        $site_mail = ini_get('sendmail_from');
      }

      \Drupal::service('plugin.manager.mail')->mail('social_auth_extra', 'email_social_login', $account->getEmail(), $langcode, $params, $site_mail);
    }
    catch (EntityStorageException $e) {
      drupal_set_message($this->t('Creation of user account failed. Please contact site administrator.'), 'error');
      $logger_factory = \Drupal::service('logger.fatory');
      $logger_factory
        ->get($id)
        ->error('Could not create new user. Exception: @message', [
          '@message' => $e->getMessage(),
        ]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function social_auth_extra_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $account = $form_state->getFormObject()->getEntity();
  $network_manager = \Drupal::service('plugin.network.manager');
  $networks = $network_manager->getDefinitions();

  if ($account->id()) {
    if ($networks) {
      $form['social_login_connections'] = [
        '#type' => 'fieldset',
        '#title' => t('Social Log in Connections'),
      ];

      foreach ($networks as $network) {
        $instance = $network_manager->createInstance($network['id']);

        if (!$instance->isActive()) {
          continue;
        }

        $user_manager = \Drupal::service($network['id'] . '.user_manager');
        $user_manager->setAccount($account);

        $form['social_login_connections'][$network['id']] = [
          '#type' => 'item',
          '#social_linkitem' => TRUE,
          '#title' => $network['social_network'],
        ];

        if ($user_manager->getAccountId()) {
          $form['social_login_connections'][$network['id']]['link'] = [
            '#type' => 'link',
            '#title' => t('Unlink'),
            '#attributes' => array(
              'class' => array('btn btn-default btn-social-linking'),
            ),
            '#url' => Url::fromRoute($network['id'] . '.user_unlink'),
          ];
        }
        else {
          $form['social_login_connections'][$network['id']]['link'] = [
            '#type' => 'link',
            '#title' => t('Link'),
            '#attributes' => array(
              'class' => array('btn btn-flat btn-social-linking'),
            ),
            '#url' => Url::fromRoute($network['id'] . '.user_link'),
          ];
        }
      }
      // If there are no any active network, hide fieldset.
      if (empty(array_intersect_key($networks, $form['social_login_connections']))) {
        unset($form['social_login_connections']);
      }
    }

    if (!$account->get('pass')->value) {
      $form['account']['current_pass']['#access'] = FALSE;
      $form_state->set('user_pass_reset', TRUE);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_admin_settings().
 */
function social_auth_extra_form_user_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('social_auth_extra.mail');

  $form['email_social_login'] = [
    '#type' => 'details',
    '#title' => t('Welcome (registration with social network)'),
    '#description' => t('This message will be sent to users when users will be registered with a social network account.'),
    '#group' => 'email',
    '#tree' => TRUE,
    '#weight' => -10,
  ];

  $form['email_social_login']['subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#maxlength' => 180,
    '#default_value' => $config->get('email_social_login.subject'),
  ];

  $form['email_social_login']['body'] = [
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#rows' => 8,
    '#default_value' => $config->get('email_social_login.body'),
  ];

  $form['#submit'][] = 'social_auth_extra_form_user_admin_settings_submit';
}

/**
 * Custom submit function for user_admin_settings().
 */
function social_auth_extra_form_user_admin_settings_submit($form, FormStateInterface $form_state) {
  $config = \Drupal::service('config.factory')->getEditable('social_auth_extra.mail');
  $config->set('email_social_login', $form_state->getValue('email_social_login'));
  $config->save();
}

/**
 * Implements hook_mail().
 */
function social_auth_extra_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  $language_manager = \Drupal::languageManager();
  $langcode = $message['langcode'];
  $variables = array('user' => $params['account']);

  $language = \Drupal::languageManager()->getLanguage($params['account']->getPreferredLangcode());
  $original_language = $language_manager->getConfigOverrideLanguage();
  $language_manager->setConfigOverrideLanguage($language);
  $mail_config = \Drupal::config('social_auth_extra.mail');

  $token_options = [
    'langcode' => $langcode,
    'callback' => 'user_mail_tokens',
    'clear' => TRUE,
  ];
  $message['subject'] .= PlainTextOutput::renderFromHtml($token_service->replace($mail_config->get($key . '.subject'), $variables, $token_options));
  $message['body'][] = $token_service->replace($mail_config->get($key . '.body'), $variables, $token_options);

  $language_manager->setConfigOverrideLanguage($original_language);
}
