<?php

/**
 * @file
 * Social AJAX comments module file.
 */

use Drupal\ajax_comments\Utility;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\node\Entity\Node;
use Drupal\social_post\Entity\Post;

function social_ajax_comments_entity_display_build_alter(&$build, $context) {
  // Only for comments on nodes on the default display.
  if (!$context['entity'] instanceof Node && !$context['entity'] instanceof Post) {
    return;
  }
  foreach ($build as $field_name => $field) {
    if (!empty($field['#field_type']) && $field['#field_type'] === 'comment') {
      // Check that this comment field uses Ajax Comments.
      /** @var \Drupal\ajax_comments\FieldSettingsHelper $field_settings_helper */
      $field_settings_helper = \Drupal::service('ajax_comments.field_settings_helper');
      $field_config = $build[$field_name]['#items']->getFieldDefinition();
      $field_formatter = $field_settings_helper->getFieldFormatter($context['display'], $field['#field_name'], $field_config, $context['display']->getMode());
      if (!empty($field_formatter) && $field_settings_helper->isEnabled($field_formatter)) {
        // Check if this ID is being generated in response to an Ajax request.
        if (Utility::isAjaxRequest(\Drupal::request())) {
          // Note that setting ajax as TRUE on Html here also fixes issue
          // with non-unique IDs on textarea elements return through ajax,
          // which otherwise could result in WYYSIWYG editors being
          // incorrectly attached by Drupal.attachBehaviors().
          Html::setIsAjax(TRUE);
        }

        $html_id = $field['#entity_type'] . '_' . $field['#bundle'] . '_' . $field['#field_name'];
        if ($context['entity'] instanceof Post) {
          // It will also run on AJAX commands so cant do a .=
          // otherwise it will keep on adding the id.
          $html_id = $field['#entity_type'] . '_' . $field['#bundle'] . '_' . $field['#field_name'] . '_' . $context['entity']->id();
        }
        if (isset($build[$field_name])) {
          $build['#cache']['contexts'][] = 'url';
          $build[$field_name]['#attributes']['id'] = Html::getId($html_id);
          Utility::setEntityRenderArray($build, $context['entity'], $context['display']->getMode());
        }
      }
    }
  }
}

/**
 * Implements hook_ajax_comments_wrapper_id_alter().
 */
function social_ajax_comments_ajax_comments_wrapper_id_alter($wrapper_html_id, ContentEntityInterface $commented_entity, $field_name) {
  if ($commented_entity instanceof Node && $field_name === 'field_topic_comments') {
    $wrapper_html_id = 'node-topic-field-topic-comments';
  }
  if ($commented_entity instanceof Node && $field_name === 'field_event_comments') {
    $wrapper_html_id = 'node-topic-field-event-comments';
  }
  if ($commented_entity instanceof Post && $field_name === 'field_post_comments') {
    $wrapper_html_id = 'post-photo-field-post-comments-' . $commented_entity->id();
  }
}