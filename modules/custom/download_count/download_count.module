<?php

/**
 * @file
 * Tracks file downloads for files stored in the drupal files table.
 *
 * Using the private files setting or custom private filefield.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function download_count_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.download_count':
      return '<p>' . t('Counts file downloads for private core file fields and
      logs a message to the watchdog table.') . '</p>';
  }
}

/**
 * Implements hook_file_access().
 */
function download_count_file_access($entity, $operation, $account) {
  if ($operation == 'download') {
    $flood = \Drupal::flood();
    $config = \Drupal::config('download_count.settings');
    $flood_window = $config->get('download_count_flood_window');
    $time = REQUEST_TIME;

    // Invalidate file field formatter.
    $cache_tag = 'file:' . $entity->id();
    Cache::invalidateTags(array($cache_tag));

    if ($account->hasPermission('skip download counts')) {
      return;
    }

    // Check flood control.
    $flood_limit = $config->get('download_count_flood_limit');
    if ($flood_limit > 0) {
      if (!$flood->isAllowed('download_count-fid_' . $entity->id(), $flood_limit, $flood_window)) {
        return;
      }
    }

    // Validate file has extension that should be counted, if not return.
    $extensions = explode(' ', Unicode::strtolower(trim($config->get('download_count_excluded_file_extensions'))));
    if (count($extensions)) {
      $extension = Unicode::strtolower(pathinfo($entity->getFilename(), PATHINFO_EXTENSION));
      if (in_array($extension, $extensions)) {
        return;
      }
    }

    // Count the download.
    $ip = Drupal::request()->getClientIp();
    $referrer = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : t('Direct download');
    $references = file_get_file_references($entity, NULL, EntityStorageInterface::FIELD_LOAD_REVISION, NULL);
    foreach ($references as $field_name => $entity_map) {
      foreach ($entity_map as $referencing_entity_type => $referencing_entities) {
        foreach ($referencing_entities as $referencing_entity) {
          $entity_type = $referencing_entity->getEntityTypeId();
          $entity_id = $referencing_entity->id();
        }
      }
    }
    if (!empty($entity_type) && !empty($entity_id)) {
      $connection = Database::getConnection();
      $connection->insert('download_count')
        ->fields(array(
          'fid' => $entity->id(),
          'uid' => $account->id(),
          'type' => $entity_type,
          'id' => $entity_id,
          'ip_address' => $ip,
          'referrer' => $referrer,
          'timestamp' => $time,
        ))
        ->execute();

      $flood->register('download_count-fid_' . $entity->id(), $flood_window);
    }
  }
}

/**
 * Implements hook_theme().
 */
function download_count_theme() {
  $theme = array(
    'download_count_file_field_formatter' => array(
      'variables' => array(
        'file' => NULL,
        'link' => NULL,
        'link_url' => NULL,
        'link_text' => NULL,
        'classes' => NULL,
        'count' => NULL,
        'file_size' => NULL,
        'path_to_socialbase' => NULL,
        'node_icon' => NULL,
      ),
    ),
  );
  return $theme;
}
