<?php

/**
 * @file
 * Installation code for the activity_creator module.
 */

/**
 * Implements hook_schema().
 */
function activity_creator_schema() {
  $schema['activity_notification_status'] = [
    'fields' => [
      'uid' => [
        'description' => 'The {user}.uid of user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'aid' => [
        'description' => 'The {activity}.id of activity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'status' => [
        'description' => 'The activity status.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ],
    ],
    'indexes' => [
      'ans_uid' => ['uid'],
      'ans_aid' => ['aid'],
      'ans_uid_aid' => ['uid', 'aid'],
      'ans_status' => ['status'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function activity_creator_update_last_removed() : int {
  return 8802;
}

/**
 * Remove entity specific configuration from activity entity reference.
 */
function activity_creator_update_13000() : string {
  // In the storage layer we no longer care about the entity stored since we're
  // changing a field that's not humanly editable but only used in business
  // logic. Other systems decide what to send notifications for and if someone
  // wants to loop send notifications for notifications, we don't stop them.
  /** @var \Drupal\update_helper\Updater $updater */
  $updater = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updater->executeUpdate('activity_creator', 'activity_creator_update_13000');

  // Output logged messages to related channel of update execution.
  return $updater->logger()->output();
}
