<?php

/**
 * @file
 * Info and alter hooks for the Secret File System module.
 */

use Drupal\Component\Utility\Html;
use Drupal\secret_file_system\Plugin\Filter\FilterHtmlImageSecure;

/**
 * Implements hook_filter_info_alter().
 */
function secret_file_system_filter_info_alter(array &$info) : void {
  if (isset($info['filter_html_image_secure'])) {
    $info['filter_html_image_secure']['class'] = FilterHtmlImageSecure::class;
  }
}

/**
 * Process callback for local image filter.
 *
 * Inherited from _filter_html_image_secure_process().
 */
function _secret_file_system_filter_html_image_secure_process(string $text) : string {
  // Find the path (e.g. '/') to Drupal root.
  $base_path = base_path();
  $base_path_length = mb_strlen($base_path);

  // Find the private path.
  $private_path = $base_path . 'system/files/';
  $private_path_length = mb_strlen($private_path);

  // Start edit Secret File System.
  // Find the secret path.
  $secret_path = $base_path . 'system/file/';
  $secret_path_length = mb_strlen($secret_path);
  // phpcs:ignore
  // End edit secret file system.

  // Find the directory on the server where index.php resides.
  $local_dir = \Drupal::root() . '/';

  $html_dom = Html::load($text);
  $images = $html_dom->getElementsByTagName('img');

  /** @var \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator */
  $file_url_generator = \Drupal::service('file_url_generator');
  foreach ($images as $image) {
    $src = $image->getAttribute('src');
    // Transform absolute image URLs to relative image URLs: prevent problems on
    // multisite set-ups and prevent mixed content errors.
    $image->setAttribute('src', $file_url_generator->transformRelative($src));

    // Verify that $src starts with $base_path.
    // This also ensures that external images cannot be referenced.
    $src = $image->getAttribute('src');
    if (mb_substr($src, 0, $private_path_length) === $private_path) {
      $private_image_path = mb_substr($src, $private_path_length);
      $private_image_path = 'private://' . $private_image_path;
      $private_image_path = urldecode($private_image_path);
      $image_object = \Drupal::service('image.factory')->get($private_image_path);
      if ($image_object->getFileSize()) {
        // The image has the right path. Erroneous images are dealt with below.
        continue;
      }
    }
    // Start edit Secret File System.
    elseif (mb_substr($src, 0, $secret_path_length) === $secret_path) {
      $secret_image_path = mb_substr($src, $secret_path_length);
      // Remove hash and time.
      // There's probably a way to simplify (everything after including the
      // third slash, but here we are).
      $secret_image_path = mb_substr(
        $secret_image_path, (int) strpos(
          $secret_image_path, '/',
          (int) strpos(
            $secret_image_path,
            '/',
          ) + 1
        )
      );
      $secret_image_path = 'secret://' . $secret_image_path;
      $secret_image_path = urldecode($secret_image_path);
      $image_object = \Drupal::service('image.factory')->get($secret_image_path);
      if ($image_object->getFileSize()) {
        // The image has the right path. Erroneous images are dealt with below.
        continue;
      }
    }
    // End edit secret file system.
    elseif (mb_substr($src, 0, $base_path_length) === $base_path) {
      // Remove the $base_path to get the path relative to the Drupal root.
      // Ensure the path refers to an actual image by prefixing the image source
      // with the Drupal root and running getimagesize() on it.
      $local_image_path = $local_dir . mb_substr($src, $base_path_length);
      $local_image_path = rawurldecode($local_image_path);

      // Check for query string and remove it if present.
      $parse_query_string = substr($local_image_path, 0, (int) strpos($local_image_path, '?'));
      if (!empty($parse_query_string)) {
        $local_image_path = $parse_query_string;
      }

      if (@getimagesize($local_image_path)) {
        // The image has the right path. Erroneous images are dealt with below.
        continue;
      }
    }
    // Allow modules and themes to replace an invalid image with an error
    // indicator. See filter_filter_secure_image_alter().
    \Drupal::moduleHandler()->alter('filter_secure_image', $image);
  }
  $text = Html::serialize($html_dom);
  return $text;
}
