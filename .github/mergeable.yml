# This file is a configuration file of github bot called mergeables.
# See: https://github.com/apps/mergeable
#
# The bot help us to enforce standards and conventions on our repository.
# See: https://mergeable.readthedocs.io/en/latest/usage.html
#
# This contains the following checks.
#    1. Welcomes a pull request contributor.
#    2. Validates the title in a given format.
#    3. Checks for certain keywords in commit messages. For example, 'fix'.
#    4. Validates that certain labels are added on pull request.
#    5. Adds 'status: needs work' label when reviews request changes in pull request, and also removed 'status: needs review' label.
#    6. Adds 'status: needs review' label when a pull request review is requested.
#    7. Requests maintainers for review when the label 'optional: review requested' label is added.
#    8. Performs check for backport after 24 hours of pull request merged.
#    9. Performs check on pull request being open for more than 30 days and informs the maintainers about it.
#
# Please read documentation of mergeable at
# https://mergeable.readthedocs.io/en/latest/configuration.html#basics

version: 2
mergeable:
  # Let's welcome contributors.
  - when: pull_request.opened
    name: "Hola!"
    validate: []
    filter:
      - do: author
        must_exclude:
          regex: 'dependabot'
    pass:
      - do: comment
        payload:
          body: >
            Thanks for contributing towards Open Social! A maintainer from the @goalgorilla/maintainers group might not
            review all changes from all teams/contributors. Please don't be discouraged if it takes a while. In the meantime,
            we have some automated checks running and it might be that you will see our comments with some tips or requests
            to speed up the review process. :blush:
        leave_old_comment: true

  # Check for a valid title.
  # See: https://mergeable.readthedocs.io/en/latest/validators/title.html
  - when: pull_request.*
    name: "Valid issue title"
    validate:
      # The pull request should have the title in following formats
      - do: title
        # It must start with following keywords.
        begins_with:
          match: ['Issue #', 'Internal:', 'Updates:', 'Hotfix:']
        # It must end with a full stop.
        ends_with:
          match: '.'
    fail:
      - do: comment
        payload:
          body: >
            For us to match your pull request to the correct open source or internal issue, its title should either:
              - begin with a reference to a Drupal.org issue number: "Issue #issuenumber"
              - begin with Internal: if it's related to an internal ticket
              - begin with Updates: if we are updating one of our dependencies
              - begin with Hotfix: if we are creating a hotfix
              - ends with a full stop (.)
      - do: labels
        add: 'blocked: drupal.org ticket'
      - do: checks # default fail case
        status: 'failure' # Can be: success, failure, neutral, cancelled, timed_out, or action_required
    pass:
      - do: labels
        remove: 'blocked: drupal.org ticket'
      - do: checks # default fail case
        status: 'success'

  # Check for meaningful commit messages.
  # See: https://mergeable.readthedocs.io/en/latest/validators/commit.html
  - when: pull_request.*
    name: "Check commit messages"
    validate:
      # Check the commit messages.
      # It should not contain the following keywords.
      - do: commit
        message:
          regex: '^(?!.*\bCS\b).*$'
          skip_merge: true
    fail:
      - do: comment
        payload:
          body: >
            It would be nice if this was a more "helpful/motivational" message,  maybe linking towards documentation or
            some inline comment with documentation if that is not too lengthy.
      - do: labels
        add: 'blocked: commit cleanup'
      - do: checks # default fail case
        status: 'failure'
    pass:
      - do: labels
        remove: 'blocked: commit cleanup'
      - do: checks # default fail case
        status: 'success'

  # Let's make sure that the proper labels are added.
  # See: https://mergeable.readthedocs.io/en/latest/validators/label.html
  - when: pull_request.*
    name: "Valid labels"
    validate:
      # The pull request must have the following labels.
      - do: label
        and:
          - must_include:
              regex: 'team'
              message: 'Please, add "team" label'
          - must_include:
              regex: 'status'
              message: 'Please, add "status" label'
          - must_include:
              regex: 'prio'
              message: 'Please, add "prio" label'
          - must_include:
              regex: 'type'
              message: 'Please, add "type" label'
    pass:
      - do: checks
        status: success
    fail:
      - do: comment
        payload:
          body: >
            The labels team, status, priority, and types help give more information about a pull request at first glance.
            For example, the status label shows if the pull request is ready for review or not.
            Don't worry if you're unsure what labels to pick, our maintainers will be able to assist you with that.
      - do: checks # default error case
        status: 'failure' # Can be: success, failure, neutral, cancelled, timed_out, or action_required

  # Remove label 'status: needs review' once pull request is approved.
  # See: https://mergeable.readthedocs.io/en/latest/filters/payload.html
  - when: 'pull_request_review.*'
    name: 'Status check'
    filter:
      # If the pull request is approved by reviewer.
      - do: payload
        review:
          state:
            must_include:
              regex: 'approved'
    validate:
      # If it has needs review label.
      - do: label
        must_include:
          regex: 'status: needs review'
    pass:
      # Remove the label.
      - do: labels
        delete: 'status: needs review'
      - do: checks
        status: neutral

  # Add label 'status: needs work' if reviewer requested changes.
  - when: 'pull_request_review.*'
    name: 'Status check'
    filter:
      # The author should have requested review.
      - do: payload
        review:
          state:
            must_include:
              regex: 'changes_requested'
    validate:
      # The pull request should contain the needs review label.
      - do: label
        must_include:
          regex: 'status: needs review'
    pass:
      # If it has the needs review label, remove it and add needs work.
      - do: labels
        add: 'status: needs work'
        delete: 'status: needs review'
      - do: comment
        payload:
          body: 'As the reviewer has requested changes, we have added "status: needs work" and have removed "status: needs review" changes.'

  # Let's add "maintainers" team as reviewer once, 'optional: review requested' label is added.
  - when: 'pull_request_review.*'
    name: 'Request mainatainer for review'
    filter:
      # The pull request should have status request for review.
      - do: payload
        review:
          state:
            must_include:
              regex: 'review_requested'
    validate:
      # If the pull request has the following label.
      - do: label
        begins_with:
          match: 'optional: review requested'
    pass:
      # Request the maintainers for the review.
      - do: request_review
        teams: ['maintainers']
      - do: comment
        payload:
          body: 'As the @author has requested review from maintainers, we have added @goalgorilla/maintainers reviewers.'

  # Open Social always maintains multiple releases. We want to make sure that a proper milestone is added.
  # This is only ignored if pull request is internal.
  - when: pull_request.*
    name: "Valid milestone"
    # See: https://mergeable.readthedocs.io/en/latest/operators/or.html
    validate:
      - do: or
        validate:
          # The pull request should have a milestone.
          - do: milestone
            no_empty:
              enabled: true
          # Or, the pull request should have one of the following title words.
          - do: title
            begins_with:
              match: [ 'Internal:', 'Hotfix:' ]
    pass:
      - do: checks
        status: 'success'
    fail:
      - do: comment
        payload:
          body: >
            A milestone would be super lovely. This way we can map it against a correct release and be aware of
            where to cherry-pick. Don't worry if you're unsure what milestone to pick, our maintainers will be
            able to assist you with that.
      - do: checks
        status: 'failure'

  # We want to make sure that the cherry-pick was completed after the pull request was merged.
  # This check will run after 24 hours of pull request merging.
  # see: https://mergeable.readthedocs.io/en/latest/recipes.html?highlight=stale#check-stale-pr-and-issues
  - when: schedule.repository
    name: 'Check backport'
    type: pull_request
    filter:
      # see: https://mergeable.readthedocs.io/en/latest/operators/or.html
      - do: and
        filter:
          # One of the following filters.
          - do: or
            filter:
              # Pull request contains backport label.
              - do: payload
                pull_request:
                  labels:
                    must_include:
                      regex: 'status: needs backport'
                      key: 'name'
              # Or, it contains a milestone.
              - do: milestone
                no_empty:
                  enabled: true
          # And, is definitely the pull request is merged.
          - do: payload
            pull_request:
              merged:
                boolean:
                  match: true
    validate:
      # We want to check that the pull request is 24 hours old.
      - do: stale
        days: 1
        type: pull_request
        time_constraint:
          time_zone: 'Europe/Amsterdamn'
          hours_between: [ '9', '17' ]
          days_of_week: [ 'Mon', 'Tue', 'Wed', 'Thu', 'Fri' ]
      # It should contain the 'verified-cherry-picks'
      - do: label
        must_include:
          regex: 'verified-cherry-picks'
          message: 'Cherry pick flag is required'
    fail:
      - do: comment
        payload:
          body: >
            We see that this pull request has a 'status: needs backport' label. Please review the backport (cherry-pick)
            status of this pull request.
      - do: checks
        status: 'action_required'

  # We want to remind about PRs older than 30 days
  # See: https://mergeable.readthedocs.io/en/latest/validators/stale.html
  - when: schedule.repository
    name: "Validate stale pull request"
    type: pull_request
    validate:
      - do: stale
        days: 30
        type: pull_request
        time_constraint:
          time_zone: 'Europe/Amsterdamn'
          hours_between: [ '9', '17' ]
          days_of_week: [ 'Mon', 'Tue', 'Wed', 'Thu', 'Fri' ]
    pass:
      - do: comment
        payload:
          body: >
            We see this pull request has no changes for 30 or more days. Do you think it can be closed?
            Let me ping @goalgorilla/maintainers so they might be able to assist :)
