name: 'Behat'

# Controls when the workflow will run
on:
  # Triggers the workflow on all pull request events
  pull_request: { }

# github.head_ref is only set when the workflow was triggered by a pull_request and it contains the value of the source branch of the PR.
# github.ref_name will than only be used if the workflow was not triggered by a pull_request and it also just contains the branch name.
env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  feature_discovery:
    name: "Feature Discovery"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: sudo apt-get install jq

      - name: Find feature files
        id: set-matrix
        run: echo "::set-output name=features::$(ls tests/behat/features/capabilities | jq -R -s -c 'split("\n") | map(select(length > 0))')"

    outputs:
      features: ${{ steps.set-matrix.outputs.features }}

  install_open_social:
    name: "Install Open Social"
    runs-on: ubuntu-22.04
    container:
      image: goalgorilla/open_social_docker:ci
      volumes:
        - ${{ github.workspace }}:/var/www

    strategy:
      matrix:
        with_optional:
          - ""
          - "--with-optional"

    services:
      db:
        image: mariadb:10.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: social
      mailcatcher:
        image: schickling/mailcatcher
        env:
          VIRTUAL_HOST: mailcatcher.social.dev
          VIRTUAL_PORT: 1080
        ports:
          - "1080"
      redis:
        image: redis:latest

    defaults:
      run:
        working-directory: /var/www

    steps:
      # Checkout Drupal Social.
      - uses: actions/checkout@v3
        with:
          repository: 'goalgorilla/drupal_social'
          ref: '6.2.0'

      # Install the version of Open Social under test.
      - name: Composer require current branch
        run: composer require goalgorilla/open_social:dev-$BRANCH_NAME

      - name: Install Open Social
        run: |
          chmod +x scripts/social/install/install_script.sh
          scripts/social/install/install_script.sh ${{ matrix.with_optional }} --localsettings

      - name: Dump Database
        run: drush sql:dump --result-file=../installation.sql

      - name: Fix owner of web files
        run: chown -R www-data:www-data /var/www

      - name: Package up site
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}
          key: ${{ github.sha }}-test-setup${{ matrix.with_optional }}

  # This workflow contains a single job called "Running tests"
  tests:
    needs: [feature_discovery, install_open_social]

    name: 'Tests'
    runs-on: ubuntu-22.04
    container:
      image: goalgorilla/open_social_docker:ci
      volumes:
        - ${{ github.workspace }}:/var/www

    strategy:
      fail-fast: false
      matrix:
        feature: ${{ fromJson(needs.feature_discovery.outputs.features) }}
        with_optional:
          - ""
          - "--with-optional"

    services:
      web:
        image: goalgorilla/open_social_docker:ci
        env:
          DRUPAL_SETTINGS: production
        volumes:
          - ${{ github.workspace }}:/var/www
        ports:
          - "80"
      db:
        image: mariadb:10.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: social
      mailcatcher:
        image: schickling/mailcatcher
        env:
          VIRTUAL_HOST: mailcatcher.social.dev
          VIRTUAL_PORT: 1080
        ports:
          - "1080"
      redis:
        image: redis:latest
      chrome:
        # We use an image based on zenika/alpine-chrome:latest so we can add
        # the start-up arguments that we need.
        image: kingdutch/social-docker-chrome
        ports:
          - '9222:9222'

    defaults:
      run:
        working-directory: /var/www

    steps:
      - name: Download Site
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}
          key: ${{ github.sha }}-test-setup${{ matrix.with_optional }}

      # We could run all tests at once by passing the folder directly to behat
      # however, by doing this manually in a loop we have the ability to ensure
      # each test runs against a clean database cheaply.
      - name: Run Integration test
        run: |
          vendor/bin/behat --version
          for test in html/profiles/contrib/social/tests/behat/features/capabilities/${{ matrix.feature }}/*; do
            echo $test
            if head -n1 $test | grep -q "@disabled"; then
              echo "Skipping disabled test"
            else
              drush sql-drop -y
              drush sqlc < installation.sql
              vendor/bin/behat --config html/profiles/contrib/social/tests/behat/behat.yml --strict --colors $test
            fi
          done

      - name: Upload Behat Test Output
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: behat-output-${{ matrix.feature }}${{ matrix.with_optional }}
          path: html/profiles/contrib/social/tests/behat/logs
